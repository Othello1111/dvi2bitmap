#! /usr/local/bin/scsh \
-e main -s
!#

(define (main args)
  (or (handle-args (cdr args))
      (error "Usage -- bad options"))

  (if (not (file-exists? (opt-dvifile)))
      (error (format #f "Can't find file ~A" (opt-dvifile))))

  (with-output-to-file (string-append (opt-output-root) ".html")
    generate-html-sampler))

(define (handle-args args)
  (if (null? args)
      #t
      (and (handle-one-option (car args))
           (handle-args (cdr args)))))

;; parse a single option, returning true if all is OK
(define (handle-one-option opt)
  (if-match (regexp-search (rx (: bos
                                  "-"
                                  (submatch alphabetic)
                                  (submatch (* graphic))))
                           opt)
            (whole-opt optchar optarg)
            (cond
              ((and (equal? optchar "o") ; set basename of output file
                    (> (string-length optarg) 0))
               (opt-output-root optarg))
              ((and (equal? optchar "c") ; set the comment at the top of the
                                        ; generated file
                    (> (string-length optarg) 0))
               (opt-comment optarg))
              ((equal? optchar "q")     ; set the --verbosity to quiet
               (opt-verbosity "quiet"))
              ((and (equal? optchar "x") ; set the dvi2bitmap executable
                    (> (string-length optarg) 0))
               (opt-dvi2bitmap-exec optarg))
              ((and (equal? optchar "d") ; set the DVI file name
                    (> (string-length optarg) 0))
               (opt-dvifile optarg))
              (else
               (error (format #f "Unrecognised option ~A" opt))))
            #f)
  #t)

;; Options -- return a procedure which takes an optional argument.  If the
;; argument is present, then set the option's value to that argument.
;; In any case, return the value of the option before the call.
(define (create-option default)
  (let ((value default))
    (lambda val
      (if (null? val)
          value
          (let ((oldval value))
            (set! value (car val))
            oldval)))))
(define opt-dvi2bitmap-exec (create-option "dvi2bitmap"))
(define opt-output-root (create-option "modetest-sampler"))
(define opt-dvifile (create-option "modetest.dvi"))
(define opt-comment (create-option ""))
(define opt-verbosity (create-option "normal"))


;; Generate a sampler to the default output port.  At the same time, run
;; (opt-dvi2bitmap-exec) with a variety of illustrative options.
(define (generate-html-sampler)
  (format #t "<html><head><title>dvi2bitmap sampler</title></head>~%<body>~%")
  (if (> (string-length (opt-comment)) 0)
      (format #t "<p>~A</p>~%" (opt-comment)))

  (format #t "<p>Command line: <code>dvi2bitmap --output-type=png</code> &lt;arguments&gt; <code>~A</code></p>~%" (opt-dvifile))
  (format #t "<table border=1><tr><th>Arguments</th><th>Result</th></tr>~%")

  (let loop ((argset '(()
                       ("--magnification=2" "--scaledown=2")
                       ("--magnification=3" "--scaledown=3")
                       ("--magnification=4" "--scaledown=4")
                       ("--font-mode=ncd" "--resolution=95")
                       ("--magnification=2" "--scale=2" "--font-mode=ncd" "--resolution=95")
                       ("--font-mode=nec" "--resolution=180")
                       ("--scale=2" "--font-mode=nec" "--resolution=180")
                       ("--magnification=2" "--scale=4" "--font-mode=nec" "--resolution=180")
                       ))
             (idx 0))
    (if (not (null? argset))
        (let* ((fn (format #f "~A-~A.png" (opt-output-root) idx))
               (opopt (format #f "--output=~A" fn)))
          (run ,(append `((opt-dvi2bitmap-exec)
                          ,(string-append "--verbose=" (opt-verbosity))
                          "--output-type=png"
                          ,opopt)
                        (car argset)
                        (list (opt-dvifile))))
          (format #t
                  "<tr><td>~A</td><td><img src='~A'/></td></tr>~%"
                  (string-join (car argset))
                  fn)
          (loop (cdr argset)
                (+ idx 1)))))

  (format #t "</table></body></html>~%"))


;;; Local Variables:
;;; mode: scheme
;;; End:
