<?xml version="1.0"?>
<!DOCTYPE ssn PUBLIC
              "-//Starlink//DTD Starlink SSN 0.7 (XML)//EN"
              "ssn-xml-0.7.dtd" [
  <!ENTITY releasenotes SYSTEM "ReleaseNotes">
  <!ENTITY version-number SYSTEM "../VERSION">
  <!--ENTITY ddash CDATA "-x-" -->
  <!ENTITY ddash "--">
]>


<ssn>
  <docinfo>
    <title>Dvi2bitmap -- convert DVI files to bitmap images</title>
    <authorlist>
      <author email="norman@astro.gla.ac.uk"
        webpage="http://www.astro.gla.ac.uk/users/norman/"
        affiliation="Starlink, Glasgow University" id="ng">Norman Gray
      </author>
    </authorlist>
    <manualtype type="users"></manualtype>
    <softwareversion>0.13b1</softwareversion>
    <docnumber documenttype="ssn">71</docnumber>
    <history>
      <version number="0" date="14-JUN-1999" author="ng"><px>Initial
          version</px></version>
      <distribution string="initial" date="14-JUN-1999" author="ng">
        <px>First public release</px>
      </distribution>
      <change date="19-JUN-1999" author="ng" versionid="upd1">
        <px>Added kpathsea support, and appendix on TeX
        dimensions.</px>
      </change>
      <change date="24-JUN-1999" author="ng" versionid="upd2"><px>Slight restructuring to make it easier to find the instructions on
          generating fonts.  Fixed a couple of typos.
        </px></change>
      <distribution string="0.4" date="05-JUL-1999" author="ng" versionid="upd3"><px>Altered documentation of font-searching, to match new functionality.
        </px></distribution>
      <distribution string="0.5" date="06-SEP-1999" author="ng"
        versionid="upd5"><px>Assorted changes, to describe significant
          new functionality.</px></distribution>
      <change date="13-SEP-1999" author="ng"
        versionid="post-upd5"><px>Added page-selection features, and
          documented them.</px></change>
      <distribution string="0.6" date="18-SEP-1999" author="ng"
        versionid="upd6"><px>Add
          --enable-fake-progname.</px></distribution>
      <distribution string="0.7" date="05-May-2000" author="ng"
        versionid="v0-7"><px>New release.  Documentation tidyups.
          Mentioned new support for PNG graphics.</px></distribution>
      <distribution string="0.7-1" date="12-May-2000" author="ng"
        versionid="v0-7-1"><px>Described problems finding
          fonts.</px></distribution>
      <distribution string="0.8" date="08-Jun-2000" author="ng" versionid="v0-8"><px>Documented changes to list of specials (foreground and background
          colours, and strut).</px></distribution>
      <distribution string="0.9" date="11-Jun-2000" author="ng" versionid="v0-9"><px>Minor functionality changes, but significant interface changes, so new
          version.</px></distribution>
      <distribution string="0.9-2" date="12-Jun-2000" author="ng"
        versionid="v0-9-2"><px>Bugfix release.</px></distribution>
      <change date="16-Jun-2000" author="ng"
        versionid="v0-9-2-1"><px>Explained how to set
          DVI2BITMAP_PK_PATH automatically.</px></change>
      <distribution string="0.9-3" date="21-Jun-2000" author="ng"
        versionid="v0-9-3"><px>Mostly clarifying and amplifying
          explanations.</px></distribution>
      <distribution string="0.9-4" date="23-Jun-2000" author="ng"
        versionid="v0-9-4"><px>Adjustments to distribution -- no
          functionality change.</px></distribution>
      <distribution string="0.9-5" date="27-Jun-2000" author="ng" versionid="v0-9-5"><px>Added -bp, -PC, -Qp options, and corrected bugs which caused fonts to
          be generated at the wrong sizes, and to be spaced incorrectly.
        </px></distribution>
      <change date="8-Nov-2000" author="ng" versionid="v0-9-5-1"><px>Minor changes to the configuration options, plus a couple of
          documentation tidyups.
        </px></change>
      <distribution string="0.9-6" date="12-Jan-2001" author="ng" versionid="v0-9-6"><px>Took opportunity of a bug-fix release of the software to make
          miscellaneous minor edits to the documentation.
        </px></distribution>
      <distribution string="0.9-7" date="05-Feb-2001" author="ng" versionid="v0-9-7"><px>The program now generates XPM bitmaps, too, and I noted this where
          appropriate.</px></distribution>
      <change date="02-Apr-2001" author="ng"
        versionid="v0-9-7-1"><px>Minor documentation
          updates.</px></change>
      <distribution string="0.10b1" date="13-Feb-2003" author="ng" versionid="v0-10-0-1"><px>Major changes to options.  Supports external programs to find
          fonts.</px></distribution>
      <distribution string="0.10"
        date="18-May-2003" author="ng" versionid="v0-10-0"><px>Enhancement
          of internal documentation.  Added --help
          option.</px></distribution>
      <distribution string="0.12"
        date="20-Dec-2003" author="ng" versionid="v0-12"><px>Significant
          refactoring of library, and addition of
          functionality.</px></distribution>
    </history>

    <copyright>
      <p>Copyright 1999--2003, Council for the Central Laboratory of
        the Research Councils.</p>
    </copyright>

  </docinfo>

  <docbody>
    <abstract><px>This application processes a DVI file produced by
        TeX, converting each page to a single bitmap.  The conversion is done
        directly, rather than through a chain of intermediate file formats,
        making the process extremely fast.  It can produce output as XBM, XPM,
        GIF and PNG files.</px></abstract>

    <sect id="intro" export="export">
      <subhead>
        <title>Introduction</title>
      </subhead>

      <p>It is sometimes useful to convert the typeset output of TeX into
        a bitmap image viewable on the web.  This is most often the case when
        TeX or LaTeX are being used to typeset the mathematics in a paper
        being conveted to HTML.  It is possible to do this with a chain of
        general-purpose tools, for example going from DVI to postscript to PNM
        files to GIFs, but this is generally slow.  For an overview of maths
        and SGML/HTML, see <ref id="sgml.maths"/>.</p>

      <p>The tool dvi2bitmap does this processing in a single step,
        reading the DVI file and font files, and emitting a bitmap.
        It can, at present, generate XBM, XPM, GIF and, if the
        relevant library is installed, PNG files.</p>

      <p>See <ref id="usage"/> for usage instructions, and <ref
      id="install"/> for installation instructions.</p>

      <p>The <code>dvi2bitmap</code> application is available for download at 
        <url>http://www.astro.gla.ac.uk/users/norman/star/dvi2bitmap/</url>.
      </p>

      <p>This document matches version 0.13b1 of the program (you can
        see what version you have with the command <kbd>dvi2bitmap
          -V</kbd>).  This should currently be regarded as beta
        software.</p>

    </sect>

    <sect id="usage" export="export">
      <subhead>
        <title>Usage</title>
        <update versionid="upd3"><px>Added a description of my usage model, to help
make things a little clearer.</px></update>
      </subhead>

      <p>Synopsis:
<verbatim>dvi2bitmap [flags] dvi-file</verbatim>
</p>
      <p>This program is intended to conform to the DVI processing
        standard.</p>

      <p>The <code>dvi-file</code> argument is the name of a DVI file to be
converted to a bitmap.  dvi2bitmap looks for the file both with and
without the default extension <code>.dvi</code>.</p>

      <p>You may also read the DVI file from the standard input by
        giving the DVI file as <code>"-"</code>, thus
<verbatim>cat myfile.dvi | dvi2bitmap -</verbatim>
        is an alternative way of reading the file (rather pointless in this
        case, but it shows the principle; see <ref id="usagenotes.pipe"/>
        for further discussion).
        For more arcane purposes, the DVI file may also be specified as 
        <code>&lt;osfile&gt;dvi-file</code>
        (which is entirely equivalent), or 
        <code>&lt;osfd&gt;integer</code>, where the given integer specifies an
        open file descriptor; specifying <code>"-"</code> as the input file is
        equivalent to <code>&lt;osfd&gt;0</code></p>

      <p>The motivation for this program was the need for a helper program
        to produce small bitmaps for inclusion in web pages.  Accordingly, the
        program's underlying usage model is that one would generate a file of
        TeX or LaTeX material, convert it to a DVI file using TeX, and
        convert the result to a collection of bitmap files.  The input
        text will typically be equations, but any other TeX material
        will work as well.  For example, the processor which generates
        the HTML could spit out a file such as
<verbatim>\documentclass{article}
\pagestyle{empty}
\begin{document}
$E=mc^2$
\newpage
% etc...
\end{document}</verbatim>
        and then this program can scoot through it turning each page
        into a bitmap.  I had thought about some complicated scheme to
        delimit areas on the page, but realised that since the file
        being processed would typically be generated on the fly
        specifically for processing by a tool like this, this wasn't
        really necessary.  See <ref id="developments"/> for a script
        which can help with this.
      </p>

      <p>I hope that the program is (or can be made to be) flexible
        enough to support other modes of use.</p>

      <subsect id="usage.options" export="export">
        <subhead>
          <title>Options</title>
          <update versionid="upd5"><px>Added documentation of -c and
              -C options</px></update>
          <update versionid="post-upd5"><px>Added documentation of -p,
              -l, -pp options.  Note that the old -l and -L options have
              changed into the new -L and -LL options.</px></update>
          <update versionid="v0-7"><px>Clarified the -p, -l and -pp
              options.  Changed -Q into -qq, and -L into -Qf.</px></update>
          <update versionid="v0-9-5"><px>Added -bp, -Qp,
              -PC</px></update>
          <update versionid="v0-9-5-1"><px>Mentioned that the -gp
              option also debugs kpathsea.</px></update>
          <update versionid="v0-10-0-1"><px>Completely new option
              specs</px></update>
        </subhead>

        <p>Various of the options below have common syntax features.
          <dl>
            <dt><code>[keyword-value-list]</code></dt>
            <dd><p>This
                indicates a sequence of <code>keyword=value</code> pairs,
                separated by commas.  Not all keywords necessarily have a
            value.</p>
            </dd>

            <dt><code>[boolean]</code></dt>
            <dd><p>This can be `yes', `true' or `on' indicating
                <em>true</em>; or `no', `false' or `off' indicating
                <em>false</em>.</p></dd>
          </dl>
        </p>
        
        <p>The options are as follows:
          <dl>
            <dt><code>-c, --crop=[keyword-value-pairs]</code></dt>
            <dd>
              <p>The <code>--crop</code> option allows you to control
                how the generated bitmaps are cropped before they are
                written.  The keywords are `left', `right', `top',
                `bottom' and `all', and the value in each case is the
                number of pixels to leave as a margin.  If the keywords
                `relative' (default) or `absolute' are present, they refer
                to all of the keywords following: if the crop is specified
                as `relative', then the values specify the number of
                pixels to leave around the blackened pixels of the text;
                if the crop is `absolute', then it specifies the position
                of the crop (in pixels) from the left or top edge of the
                `page'.  The specification
                <code>----crop=absolute,all=dimen</code>, which would set
                all the crops to the same position, is silly, and so is
                forbidden.</p>

              <p>The conversion from points to pixels takes account of
                the magnification set in the
                <code>--magnification</code> option, if that's been
                specified already, but it doesn't notice if that's set
                after this option, and it takes no account of any
                magnification in the DVI file.</p>

              <p>See <ref id="usage.special"/> for TeX
                <code>\special</code> commands which set this within
                the TeX file.</p>

              <p>See below for TeX <code>\special</code> commands
                which set this within the TeX file.</p>

            </dd>

            <dt id="usage.options.fp">
              <code>-F, --font-search=[keyword-value-list]</code>
            </dt>
            <dd><p>Specifies how <code>dvi2bitmap</code> is to find
                the fonts it needs.  Keywords are as follows:</p>

              <p><code>path[=list]</code>: use the given list of
                filesystem paths to search for PK fonts, or enable
                using the default path, if <code>=path</code> is
                missing.  The default path is given by the environment
                variable <code>DVI2BITMAP_PK_PATH</code>.  See also
                the discussion of font searching below.</p>

              <p><code>kpathsea</code>: enable using the
                <code>kpathsea</code> library to find fonts.  If the
                program was not built against the
                <code>kpathsea</code> library, this option has no
                effect.</p>

              <p><code>command[=script]</code>: enable using the given
                script to find fonts.  If the argument is missing,
                this enables using the script configured into the
                program at compile-time.  This script is any program
                which will search the filesystem and produce a single
                line on output, giving the full path to the specified
                font.  For example, this might be given as
                <code>kpsewhich pk %f.%dpk</code> to run the
                <code>kpsewhich</code> program.  The command name is a
                font-string template, as described <ref
                id="usage.fonts.template">elsewhere</ref>.</p>

              <p>If the program does not find a font using whichever
                methods have been enabled then, following the pattern
                of <code>dvips</code> and other DVIware, it writes a
                file <code>missfont.log</code> in the current
                directory, containing commands which you can use to
                generate the fonts immediately or later.</p>

              <p><code>none</code>: disable all font-searching.  The
                result is that only the <code>missfont.log</code> file
                is written.</p>

              <p>Each of the keywords can be prefixed by `no' to turn
                off the corresponding option -- thus
                <code>--font-search=nopath,nokpathsea,nocommand</code>
                has the same effect as
                <code>--font-search=none</code>.</p>
            </dd>

            <dt>
              <code>-G, --font-gen=[boolean], --font-gen=command[=script]</code></dt>
            <dd>
              <p>Switch automatic generation of fonts off and on.  If
                <code>--font-gen=command</code> is given, then the
                command specified at compile time is used to generate
                fonts.  If, further, a font-generation script is
                specified, then it will be used instead of the
                default.  The specified script is a font-string
                template, as described below.  The default for
                automatic font generation is set at compile time.</p>
            </dd>

            <dt id="usage.options.g"><code>-g, --debug=[spec]</code></dt>
            <dd>
              <p>Switch on debugging.  The <code>[spec]</code> is a
                list of letters indicating what to debug, as follows.
                You may trace DVI file parsing (`d'), PK file parsing
                (`p'), font rasterdata parsing (`r'), input (`i'),
                bitmap generation (`b') or the main program (`m').
                Adding an extra `g' increases still further the amount
                of debugging code.  The debugging information may be
                uninformative or unintelligible; it might even crash
                the program (mention that to me).</p>

            </dd>

            <dt><code>-h, --height=size; -w, --width=size</code></dt>
            <dd>
              <p>Specify the height and width of the canvas on which
                the output bitmap is painted.  The program tries to
                make an estimate of this based on information within
                the DVI file, but it can't efficiently get all the
                information it needs, so sometimes the estimate is
                wrong.  If you get a warning message like
                <code>Warning: p.12: bitmap too big: occupies
                (1183,1072)...(4134,6255). Requested 4100x6200</code>
                then you'll need to specify a bitmap size.  The
                numbers <code>(1183,1072)...(4134,6255)</code> are the
                coordinates of the top-left and bottom-right of the
                bitmap: in this case <code>--height=6300
                --width=4200</code> would suffice.  At some point, I'd
                like to make the bitmap `expandable', obviating the
                need for these options.</p>
            </dd>

            <dt><code>--help</code></dt>
            <dd>
              <p>Display outline help for the options on stderr, and
                exit</p>
            </dd>

            <dt><code>-l, --end-page</code></dt>
            <dd>
              <p>See option <code>--start-page</code></p></dd>

            <dt id="usage.options.fm"><code>-M,
                --font-mode=[mode]</code></dt>
            <dd>
              <p>Set the MetaFont mode which is used for generating
                font files.  The default is <code>ibmvga.</code> If
                you set this, you will probably have to set the
                resolution to a consistent number.</p>
            </dd>

            <dt><code>-m, --magnification=[number]</code></dt>
            <dd>
              <p>The TeX magnification parameter which is used when
                processing the DVI file. It is a float, with 1.0
                corresponding to no magnification (the default).  This
                interacts with the resolution as follows: if you
                specify a resolution of 100, and a magnification of 2,
                then <code>dvi2bitmap</code> will search for PK files
                at 200 dpi.</p>
            </dd>

            <dt><code>-n, --nodvi</code></dt>
            <dd>
              <p>Do not actually process the DVI file, but read the
                DVI pre- and postamble.  Useful in conjunction with
                the <code>--query</code> options.  If this option is
                present, then the program returns non-zero if any
                fonts were missing (see also <ref id="usage.exit"/>).
                The <code>-n</code> is for brevity and consistency
                with other tools -- the behaviour can be alternatively
                specified as <code>--process=nodvi</code></p>
            </dd>

            <dt id="usage.options.output"><code>-o,
                --output=[filename-pattern]</code></dt>
            <dd>
              <p>Choose the output filename pattern.  The value is a
                `printf' formatting string, with a single
                <code>%d</code> formatting descriptor, which will be
                replaced in output filenames with the page number.  If
                there is no such descriptor, the filename `pattern' is
                used as-is for the first filename output, after which
                the program reverts to the default filename pattern.
                The filename pattern can be overridden on a per-page
                basis by a TeX <code>\special</code> embedded in the
                DVI file (see <ref id="usage.special.opf">the
                <code>outputfile</code> special</ref> in <ref
                id="usage.special"/>).  If there is no file extension,
                or if it does not match the output type, a suitable
                file extension will be added.</p>
            </dd>

            <dt><code>--pipe</code></dt>
            <dd>
              <p>Indicates that the dvi-file argument is a
                non-seekable file, such as a named or unnamed pipe.
                This is automatically the case if you specify the DVI
                file as stdin, "-".</p>
            </dd>

            <dt><code>-p, --start-page=num</code>,
              <code>-l, --end-page=num</code>,
              <code>-P, --page-range=[spec]</code></dt>
            <dd>
              <p>These select page ranges, using a slight extension of
                the notation used by <code>dvips</code> (and the same
                option letters, except that <code>dvips</code> uses
                <code>-pp</code> instead of <code>-P</code>).</p>

              <p>The <code>--start-page=snum</code> and
                <code>--end-page=enum</code> options take single page
                numbers; if either of these is given, then the program
                will process pages from page <code>snum</code> to page
                <code>enum</code>, with the defaults being the
                corresponding extremes.  The <code>[spec]</code>
                consists of a comma-separated sequence of page numbers
                and ranges (<code>a-b</code>); only those pages, and
                the pages falling in those ranges (inclusive of the
                end pages) are processed.  Any of these specifications
                may be prefixed by either <code>=</code> or
                <code>:n:</code>.  In the former case, DVI page
                numbers are used rather than the TeX
                <code>\count</code><em>0</em> register; in the latter
                case, the program examines the
                <code>\count</code><em>n</em> register rather than the
                default <code>\count</code><em>0</em></p>

              <p>You can specify both of these prefixes one or more
                times, but you cannot mix the
                <code>--start-page</code> and <code>--end-page</code>
                options with the <code>--page-range</code> option.
                The program will respect only the last
                <code>--start-page</code> and <code>--end-page</code>
                options, but the <code>--page-range</code> options are
                cumulative.  There may be no spaces in the
                <code>pagelist</code>.  The page numbers may be
                negative.</p>

              <p>Examples: 
<verbatim>dvi2bitmap --page-range=3,6-10 ...</verbatim>
                process only the specified pages</p>

              <p>
<verbatim>dvi2bitmap --page-range=:2:1 ...</verbatim>
                process only pages where <code>\count2</code> was
                1.</p>
            </dd>

            <dt id="usage.options.q"><code>-Q,
                --query=[keyword-list]</code></dt>
            <dd>
              <p>Query various things.  The available possibilities
                are as given below.  The results of each of the
                queries is printed on a line by itself, prefixed by a
                `Q', the keyword and a space, so that, for example,
                each of the lines produced by the
                <code>--query=missing-fonts</code> option would start
                <code>Qmissing-fonts cmbx10 110 ...</code></p>

              <p>Some of these options
                (<code>--query=missing-fonts</code> and
                <code>--query=missing-fontgen</code>) are probably
                most useful with the <code>-n</code> or
                <code>--process=options</code> options, to investigate
                a DVI file before processing.  Others
                (<code>--query=types</code> and
                <code>--query=paper</code>) are probably useful only
                with <code>--process=options</code>.  The option
                <code>--query=bitmaps</code> is only useful if you do
                actually generate bitmaps.  For consistency (and so
                you don't have to remember which ones do which), the
                appropriate <code>--process</code> option is
                <em>not</em> implied in any of them, and you have to
                give it explicitly.</p>

            </dd>

            <dt><code>--query=bitmaps</code></dt>
            <dd>
              <p>Prints on stdout a line for each bitmap it generates,
                giving the filename, horizontal size, and vertical
                size, in pixels.  This also reports the position of
                any `mark' in the bitmap -- see <ref
                id="usage.special.mark"/>.</p>
            </dd>

            <dt><code>-Qf, --query=missing-fonts</code></dt>
            <dd>
              <p>Show missing fonts.  The program writes on standard
                output one line per missing font, starting with
                <code>Qf</code> or <code>Qmissing-fonts</code>
                (depending on which of the variants was given -- the
                shorter ones are less mnemonic, but more convenient to
                parse in scripts), then five fields: the font name,
                the DPI value it was looking for, the base-DPI of the
                font, the magnification factor, and a dummy metafont
                mode.  This output might be massaged for use with the
                mktexpk (TeXLive) or MakeTeXPK (teTeX) scripts to
                generate the required fonts, but
                <code>--query=missing-fontgen</code> is more
                straightforward.</p>
            </dd>

            <dt><code>-QF, --query=all-fonts</code></dt>
            <dd>
              <p>As for <code>--query=missing-fonts</code> except that found
                fonts are also listed, all prefixed by
                <code>Qall-fonts</code></p>
            </dd>

            <dt><code>-Qg, --query=missing-fontgen</code></dt>
            <dd>
              <p>As for <code>--query=missing-fonts</code>, except
                that the output consists of the string
                <code>Qmissing-fontgen</code> followed by a
                <code>mktexpk</code> or <code>MakeTeXPK</code> command
                which can be used to generate the font.</p>
            </dd>

            <dt><code>-QG, --query=all-fontgen</code></dt>
            <dd>
              <p>As for <code>--query=missing-fonts</code>, except that
                font-generation commands for found fonts are also listed, prefixed by
                <code>Qall-fontgen.</code></p>

              <p><em>Note</em>: Only one of
                <code>--query=missing-fonts</code>,
                <code>--query=all-fonts</code>,
                <code>--query=missing-fontgen</code> and
                <code>--query=all-fontgen</code> should be specified
                -- if more than one appears, only the last one is
                respected -- if more than one appears, only the last
                one is respected.  In each of these four cases, plus
                their short forms, font-generation is automatically
                suppressed.  This is probably what you want (it's not
                obvious why you're querying this otherwise), but if
                you do not want this, then you can reenable font
                generation with <code>--font-gen=true</code></p>
            </dd>

            <dt><code>--query=paper</code></dt>
            <dd>
              <p>Show the list of paper sizes which are predefined for the
                <code>--paper-size</code> option.</p>
            </dd>

            <dt><code>--query=types</code></dt>
            <dd>
              <p>List the output image formats which the program can
                generate, on stdout, separated by whitespace.  The
                first output format is the default.</p>
            </dd>

            <dt><code>-r, --resolution=[number]</code></dt>
            <dd>
              <p>Specifies the output resolution, in pixels-per-inch.
                This is used when deciding which PK files to use. The
                default is 110, which matches the default
                <code>ibmvga</code> metafont mode.</p>
            </dd>

            <dt id="usage.options.r"><code>-R,
                --colours=[keyword-value-list],
                --colors=[keyword-value-pairs]</code></dt>
            <dd>
              <p>Specifies the foreground or background colours, as
                RGB triples.  The keywords are either
                <code>foreground</code> or <code>background</code>,
                and the values are a triple of integers separated by
                slashes, for example
                <code>--colours=foreground=127/127/255</code>.  The
                integers must be in the range [0,255], and can be
                specified in decimal, octal or hex (for example
                <code>127=0177=0x7f</code>), or else the whole spec
                may be of the form <code>#rrggbb</code>, where `rr',
                `gg' and `bb' are each a pair of hex digits.</p>
            </dd>

            <dt><code>-s, --scaledown=[number]</code></dt>
            <dd>
              <p>Reduces the linear size of the output bitmap by the
                given factor (default 1).</p>
            </dd>

            <dt><code>-T, --output=type=[type]</code></dt>
            <dd>
              <p>Choose the output format, which can be
                <code>png</code>, <code>gif</code>, <code>xpm</code>
                or <code>xbm</code>.  The program generates XBM
                bitmaps by default, and has simple support for XPM.
                The GIF and PNG options may not be available if they
                weren't selected when the program was configured.</p>
            </dd>

            <dt><code>-t, --paper-size=papersize</code></dt>
            <dd>
              <p>Set the initial size of the bitmap to be one of the
                paper sizes returned by <code>--query=paper</code>.
                This is useful either to make sure that there is
                enough room on the initial bitmap, to avoid the
                warning above, or, along with the
                <code>--process=nocrop</code> option, to force the
                output bitmap to be a certain size.</p>
            </dd>

            <dt><code>-v, --verbose=[quiet|silent]</code></dt>
            <dd>
              <p>Quiet mode suppresses some chatter, and silent mode suppresses
                chatter, and does not display warnings or errors
                either.</p>
            </dd>

            <dt><code>-V, --version</code></dt>
            <dd>
              <p>Display the version number and compilation options,
                and exit.</p></dd>

            <dt><code>-X, --process=[keyword-value-list]</code></dt>
            <dd>
              <p>Specifies the processing to be done.  Keywords are as
                follows:</p>

              <p><code>dvi</code> and <code>nodvi</code> : enable or
                disable processing of the DVI file.  If disabled, we
                do not require a DVI file to be present on the command
                line.  The <code>nodvi</code> option is useful with
                some of the <code>--query</code> options.</p>

              <p><code>postamble</code> and <code>nopostamble</code>:
                enable or disable processing of the DVI postamble.  If
                dvi2bitmap is called to invoke a non-seekable device
                such as a pipe, you should disable processing of the
                postamble.  Disabling the postamble processing is
                incompatible with the <code>--query</code> options
                which examine the fonts in the file.  By default, both
                the DVI body and the postamble are processed.</p>

              <p><code>--process=options</code>: shorthand for
                <code>--process=nopreamble,nodvi,nopostamble</code>.
                Only the options are examined.</p>

              <p><code>blur</code> and <code>noblur</code>: if true,
                blurs the bitmap, making a half-hearted attempt to
                make a low-resolution bitmap look better.  This really
                isn't up to much -- if you have the fonts available,
                or are prepared to wait for them to be generated, a
                better way is to use the <code>--magnification</code>
                option to magnify the DVI file, and then the
                <code>--scale</code> option to scale it back down to
                the correct size.</p>

              <p><code>transparent</code> and
                <code>notransparent</code>: if true, this makes the
                output bitmap have a transparent background, if that's
                supported by the particular format you choose using
                option <code>--output-type</code></p>

              <p><code>crop</code> and <code>nocrop</code>: if true,
                specifies that you want the output bitmap to be
                cropped.  This is true by default, so you'll most
                often use the <code>crop=false</code> to specify that
                you do not want the output cropped (for example, if
                you're using the <code>--paper-size</code> option and
                want the output to stay the specified size).</p>

              <p>By default, bitmaps are not blurred, are cropped, and
                are transparent if possible.</p>

              <p>For PNG files, the output bitmap uses a palette plus
                an alpha channel; these are calculated in such a way
                that if you display the resulting bitmap on the same
                colour background as <code>dvi2bitmap</code> was using
                (which is white by default, but can be specified using
                the <ref id="usage.special.fg">`background'
                special</ref>) then the result should look identical
                to the result with no transparency information, but
                probably progressively worse the further the
                background moves from this.  I suppose, but can't at
                present check, that this implies that you should
                choose a mid-grey background colour when making such
                transparent PNGs.  I'd welcome advice on this
                point.</p>
            </dd>
          </dl>

          <!-- </sect> -->
        </p>
      </subsect>

      <subsect id="usage.special" export="export">
        <subhead>
          <title>DVI specials</title>
          <update versionid="upd5"><px>Rewritten to cover new special
              commands, particularly support for cropping.</px></update>
          <update versionid="v0-7"><px>Added documentation of
              imageformat special.</px></update>
        </subhead>

        <p>dvi2bitmap recognises several DVI special commands, and emits a
          warning if it finds any others.
        </p>

        <p>The syntax of the special commands is 
<verbatim>\special{dvi2bitmap &lt;special-command&gt;+ }</verbatim>
          There may be one or more <code>&lt;special-command&gt;</code>
          sequences within a single special.
        </p>

        <p>The <code>&lt;special-command&gt;</code> which the program
          recognises are:
          <dl>
            <dt><code>default</code></dt>
            <dd><p>Makes other special-commands in this same special affect
                defaults.  See those commands for details.
              </p></dd>

            <dt id="usage.special.opf"><code>outputfile
                &lt;filename&gt;</code></dt>
            <dd>
              <p>The output file used for the current page will be
                named <code>filename.gif</code> (if the output type
                were `gif').  A filename extension will be added if
                none is present, or if it does not match the output
                type selected.</p>

              <p>If the <code>default</code> command has been given,
                then this instead specifies the default filename
                pattern, and the `filename' should contain a single
                instance of either <code>%d</code> or <code>#</code>;
                if there is no such instance, one will be implicitly
                added at the end.</p>

              <p>The <code>%d</code> is precisely analogous to the
                behaviour of the <ref
                id="usage.options.output">--output</ref> option.
                However it is actually rather tricky to get an
                unadorned percent character into a TeX special, unless
                you play catcode tricks, and this is why you may
                alternatively include a <code>#</code> character to
                indicate where the page number should go.  In fact,
                since it is <em>also</em> rather tricky to get a
                single <code>#</code> character in a special, any
                immediately following <code>#</code> characters are
                ignored.  Thus the recommended way of specifying this
                special is through something of the form
<verbatim>
\special{dvi2bitmap default outputfile myfile-#}
</verbatim>
                using the <code>#</code> form,
                and letting the file extension be controlled by the
                output type which is actually used.</p>
            </dd>

            <dt><code>absolute</code></dt>
            <dd>
              <p>Affects the <code>crop</code> command.</p></dd>

            <dt><code>crop &lt;side&gt; &lt;dimen&gt;</code></dt>
            <dd>
              <p>Crop the bitmap on the current page so that the
                specified edge of the bitmap is
                <code>&lt;dimen&gt;</code> points away from the
                bounding box of the blackened pixels.
                <code>&lt;side&gt;</code> may be one of `left',
                `right', `top', `bottom' or `all', referring to the
                corresponding edge, or all four edges at once.  If the
                <code>default</code> command has been given in this
                special, then this pattern of cropping is additionally
                made the default for subsequent pages.  If the
                <code>absolute</code> command has been given, then the
                crop position is set at <code>&lt;dimen&gt;</code>
                points from the appropriate edge of the `paper'.</p>

              <p>The <code>-c</code> and <code>-C</code> command-line
                options (<ref id="usage.options"/>) have the effect of
                setting initial defaults.  In the absence of either of
                these, the initial crop is exactly at the bounding
                box.
              </p>
            </dd>

            <dt><code>default imageformat &lt;format&gt;</code></dt>
            <dd>
              <p>Set the default image format, which should be one of
                the keywords `xbm', `xpm' `gif', `png'.  This is
                equivalent to specifying the image format through the
                <code>-t</code> option (section <ref
                  id="usage.options"/>).</p>

              <p>The keyword is just <code>imageformat</code>, but you
                must specify the <code>default</code> keyword when you
                specify <code>imageformat</code>; this is for
                consistency, and makes it clear that this is setting a
                default format rather than setting the format only for
                the next image (that's not implemented at present, but
                could be added).
              </p>
            </dd>

            <dt id="usage.special.fg"><code>default foreground|background
                &lt;red&gt; &lt;green&gt; &lt;blue&gt;</code> </dt>
            <dd>
              <p><update versionid="v0-8"><px>Added foreground and
                    background specials, to set foreground and
                    background colours.</px></update>

                Sets the (default) foreground and background colours
                for text.  This works, as long as you specify the
                colour change before any text is output, since you
                can't, at present, change the colours after that.
                Specifically, you can't change the colours for a
                fragment of text in the middle of a page; for this
                reason, and as with <code>imageformat</code> you
                should at present always include the
                <code>default</code> keyword when using this
                special.  The integers must be in the range
                [0,255], and can be specified in decimal, octal or
                hex (ie, <code>127=0177=0x7f</code>).
              </p>
            </dd>

            <dt><code>strut &lt;left&gt; &lt;right&gt; &lt;top&gt;
                &lt;bottom&gt;</code></dt>
            <dd>
              <p><update versionid="v0-8"><px>Added strut
                special.</px></update> This places a `strut' in the
                generated file.  Using the usual TeX
                <code>\strut</code> won't work: that would leave the
                appropriate space when TeXing the file, but that space
                doesn't explicitly appear in the DVI file (which is
                just a bunch of characters and locations), so when
                <code>dvi2bitmap</code> fits its tight bounding box to
                the blackened pixels in the file, it knows nothing of
                the extra space you want.</p>

              <p>The `strut' special forces the bounding box to be at
                least `left', `right', `top' and `bottom' points away
                from the position in the file where this special
                appears.  All the dimensions must be positive, and
                they are floats rather than integers.</p>

              <p>If you wanted to set a page containing only the maths
                `<code>${}^\circ$</code>' (why, is another matter),
                <code>dvi2bitmap</code> would normally make a tight
                bounding box for the bitmap, so that you'd get an
                image containing only the circle (unless other crop
                options were in force).  If, in this case, you put in
                a special such as <code>\special{dvi2bitmap strut 0 2
                10 2.5}</code>, you would force the bounding box to
                come no closer than 0pt to the left of the position in
                the file where this special appears, 2pt to the right,
                10pt above and 2.5pt below.</p>

              <p>A useful bit of TeX magic is:
<verbatim>
{\catcode`p=12 \catcode`t=12 \gdef\DB@PT#1pt{#1}}
\def\DBstrut{\strut\special{dvi2bitmap strut 0 0 
\expandafter\DB@PT\the\ht\strutbox\space\expandafter\DB@PT\the\dp\strutbox}}
</verbatim>
                Once you've done that, the command
                <code>\DBstrut</code> will put an appropriate strut in
                the output.
              </p>
            </dd>

            <dt id="usage.special.mark"><code>mark</code></dt>
            <dd>
              <p>This sets a `mark' in the generated file, which is
                reported when you specify <code>--query=bitmaps</code>
                (see <ref id="usage.options.q"/>).  Normally,
                <code>--query=bitmaps</code> writes out the horizontal
                and vertical size of the generated bitmap.  If use of
                this special has placed a `mark' in the bitmap,
                however, then the <code>--query</code> option also
                reports the position of that mark, as a position
                within the bitmap, such that the top-left corner of
                the bitmap has coordinates <em>(0,0)</em>.  For
                example, after
<verbatim>
\noindent\special{dvi2bitmap mark}Hello
</verbatim>
                the command line
<verbatim>
dvi2bitmap --query=bitmaps foo
</verbatim>
                might report
<verbatim>
Qbitmaps foo-page1.png 80 14 -1 10
</verbatim>
                indicating that the bitmap is 80 pixels
                wide by 14 high, and that the reference point, after
                cropping, is at position <em>(-1, 10)</em>.  The `-1'
                is because the mark appears to the left of the `H' of
                `Hello' (and the `H' probably has some negative
                offset), and the `10' indicates that the baseline of
                this text is 10 pixels from the top of the bitmap;
                this latter information might be useful when working
                out how to position this bitmap within a generated
                HTML file.</p>

              <p>Both here and in the support for the `strut' special,
                there is a great deal of scope for off-by-one errors;
                also it's unclear what is the best interface to this
                functionality, so it's possible that this might change
                in subsequent versions.  The author welcomes
                comments.</p>
            </dd>

            <dt id="usage.special.unit"><code>unit
                &lt;u&gt;</code></dt>
            <dd>
              <p>The units in the `strut' and `crop' specials are by
                default in TeX points.  You may switch to a different
                unit with the `unit' special.  The specifier `u' gives
                a unit name, which may be selected from the set of
                units TeX knows about (`pt', `bp', `cm', and so on),
                plus `pixels', and `dvi' to select DVI file units
                (usually the same as `sp').  If the `default'
                qualifier is present, this setting applies to
                subsequent special strings as well.</p>
            </dd>

          </dl>
        </p>

        <p>For example, the pair of commands
<verbatim>
\special{dvi2bitmap default outputfile trial-# unit pc crop all 5}
\special{dvi2bitmap absolute crop left 5}
</verbatim>
          will change the output filename pattern for the rest of the DVI file,
          and set a 5pc margin round the bounding box.  The current page,
          however, will have a left-hand crop five points in from the left hand
          side.  Remember that TeX's origin is one inch from the left and the
          top of the paper, and it is with respect to this origin that the
          program reckons the absolute distances for the cropping.</p>

      </subsect>

      <subsect id="usage.exit" export="export">
        <subhead>
          <title>Exit value</title>
        </subhead>

        <p>Exits with a non-zero status if there were any processing errors.
          Having <em>no</em> fonts present counts as a processing error.
        </p>

        <p>If there is at least one font present, then missing fonts
          will be replaced by the first <code>cmr10</code> font it
          finds, or a more-or-less randomly chosen alternative if that
          font is not used at all.  The program will produce a warning
          if the <code>-q</code> option is not present, but it will
          return with a zero (success) status.</p>

        <p>Exception: If the <code>-n</code> option (see <ref
        id="usage.options"/>) is present, then the program returns
        success only if <em>all</em> fonts are present. </p>

      </subsect>

      <subsect id="usage.examples" export="export">
        <subhead>
          <title>Examples</title>
        </subhead>

        <p>Basic usage examples.</p>

        <p>
<verbatim>
% dvi2bitmap --resolution=110 --magnification=2 --scale=2 \
    --output-type=gif hello.dvi
</verbatim>
          This converts the file <code>hello.dvi</code> to a GIF
          bitmap.  It first sets the magnification factor to 2, so
          that the program uses a double-size font (eg,
          <code>.../cmr10.220pk</code>), then scales the bitmap down
          by a factor of 2 to obtain a bitmap of the correct size.</p>

        <p>
<verbatim>
% dvi2bitmap -n -Qf --resolution=110 --magnification=1.5 \
    --verbose=quiet hello.dvi
Qf cmr10 165 110 1.5 localfont
</verbatim>
          This reads the DVI file to find out what fonts are required, but does
          not process it further.  It then tries to find the fonts, fails, and
          produces a list of parameters which could be used to generate the
          font files.  </p>

        <p>See also <ref id="usage.fonts"/>, and see <ref
            id="usagenotes"/> for more elaborate examples of use.</p>

      </subsect>

      <subsect id="usage.fonts" export="export">
        <subhead>
          <title>Finding and generating fonts</title>
          <update versionid="upd2"><px>Renamed this section from vague
              `environment', and moved description of font generation from
              examples.</px></update>
          <update versionid="upd3"><px>Described new functionality for
          environment variable.</px></update>
        </subhead>

        <subsubsect id="usage.fonts.finding">
          <subhead>
            <title>Finding fonts</title>
            <update versionid="post-upd5"><px>Added a discussion of
                the foibles of the texmf.cnf configuration file when it
                comes to finding fonts.</px></update>
            <update versionid="upd6"><px>Mentioned
                --enable-fake-progname</px></update>
            <update versionid="v0-7-1"><px>Described potentially
                confusing interaction between enable-kpathsea and
                enable-fontgen configuration options.</px></update>
            <update versionid="v0-9-2-1"><px>Added description of
                setting DVI2BITMAP_PK_PATH automatically.</px></update>
            <update versionid="v0-9-3"><px>Added discussion of the
                `make test' script, and clarified (I hope) description of
                how to set DVI2BITMAP_PK_PATH.</px></update>
            
            <update versionid="v0-9-7-1"><px>Included a reference to
                the RedHat config problem, pointing towards the next
                section.</px></update>
          </subhead>

          <p>The program searches for fonts using a number of mechanisms.

            <ol>
              <li>
                <p>The <code>-fp</code> option (see <span
                    media="screen"><ref
                      id="usage.options.fp"/></span><span
                    media="print">above</span>) specifies a
                  colon-separated list of filename templates which
                  should be searched for font PK files.  If this is
                  given on the command line, it overrides...</p>
              </li>

              <li>
                <p>The <code>DVI2BITMAP_PK_PATH</code> environment
                  variable, if defined, specifies a colon-separated
                  list of filename templates which are to be searched
                  for PK files.
                </p>
              </li>

              <li>
                <p>If the program cannot find fonts using the
                  environment variable, and if it was configured with
                  support for the <code>kpathsea</code> library (see
                  <ref id="install.nonstarlink"/>), then it should
                  find PK files using the same mechanism other DVI
                  processors use.  </p></li>

              <li><p><code>dvi2bitmap</code> can be configured to use
                  a script to find fonts.  If the program was not
                  configured to use <code>kpathsea</code> or the
                  search fails, then the program invokes a script
                  which knows where to find font files, given a search
                  pattern, and which returns a single line containing
                  a discovered font filename.  See <ref
                    id="conf.with-fontfinder"/>.  </p></li>
            </ol>
          </p>

          <p>The third method is the ideal -- you should build
            <code>dvi2bitmap</code> using the <code>kpathsea</code>
            library if possible (see <ref id="install.web2c"/> for how
            to obtain it): it is because other DVI-processing programs
            like <code>dvips</code> and <code>xdvi</code> are built
            with the <code>kpathsea</code> library, that you normally
            never have to worry about where fonts live.  The
            <code>kpathsea</code> library is generally integrated with
            the font-generation commands, and can be queried using the
            <code>kpsewhich</code> command.
          </p>

          <p>There are one or two possible wrinkles with the third
            method.  The path-searching library is very powerful and
            flexible, but it is possible to be tripped up by its
            configuration file.
          </p>

          <p>Firstly, the program has to <em>find</em> the
            configuration file.  The program should sort this out for
            itself at configuration time, but it is possible that you
            might have to give it some help.  If you specify the
            <code>TEXMFCNF</code> environment variable, setting it to
            the directory which contains your TeX installation's
            <code>texmf.cnf</code> file, then this overrides the
            program's notion of where the configuration should be.
            You can find this file using the command <kbd>kpsewhich
            cnf texmf.cnf</kbd>.
          </p>

          <p>Secondly, it's possible to break the configuration file.
            Certain TeX distributions (the ones that came with early RedHat 6.x
            distributions are ones I know about) are broken in an
            unfortunate way. See <ref id="usage.fonts.notfinding"/>
            for a discussion.
            <!--
            <p>If the program cannot find a font, it may generate it.  If the
            <code/kpathsea> library was found and enabled at configuration time
            (see <ref id=install.nonstarlink/>), then font-generation
            is enabled. If not, font-generation is disabled, by
            default, but can be re-enabled using the configuration
            switch <code/&ddash;enable-fontgen>.
            -->
          </p>
        </subsubsect>

        <subsubsect id="usage.fonts.notfinding">
          <subhead>
            <title>Not finding fonts</title>
            <update versionid="v0-9-7-1"><px>Slightly expanded the
                reference to the RedHat config problem, including a
                cross-reference.</px></update>
          </subhead>

          <p>It can sometimes happen that <code>dvi2bitmap</code> fails to find fonts,
            successfully calls <code>mktexpk</code> to build them, but then <em>still</em>
            fails to find them, even though <code>mktexpk</code> has put them where they
            should be.  There are (at least) three possible reasons for this.
          </p>

          <p>If you are using the <code>kpathsea</code> library, there
            might be some misconfiguration which is confusing it.  You
            can trace <code>kpathsea</code>'s deliberations in massive
            detail by giving the option <code>-ggp</code> (<ref
            id="usage.options.g"/>).
          </p>

          <p>Perhaps you do not have the <code>kpathsea</code> library
            installed, or have disabled it, but you <em>have</em>
            requested that font-generation be enabled (see <ref
            id="install.nonstarlink"/>).  What happens in this case is
            that <code>mktexpk</code> successfully builds the fonts,
            and installs them in the correct place, where `correct
            place' means `the place where <code>kpathsea</code> would
            find them'; you're not using <code>kpathsea</code>, so no
            fonts for you.  What you have to do in this case is work
            out where the `correct place' is (<code>kpsepath</code>
            and <code>kpsewhich</code> can help here), and specify
            that place using either the <code>-fp</code> option or the
            <code>DVI2BITMAP_PK_PATH</code> variable, as above (this
            is confusing, I know, but more-or-less unavoidable, since
            we are here trying to do <code>kpathsea</code>'s job,
            without <code>kpathsea</code>).
          </p>

          <p>I think it is also possible to fall victim to a race
            condition, where the font is built successfully, but the
            program looks for it in the correct place before the font
            is fully flushed to disk, or (mumble) something like that.
            Simply running <code>dvi2bitmap</code> a second time seems
            to work OK.  I'm not sure precisely what's going on here,
            and I'd welcome more precise observations, here.
          </p>

          <p>Another, slightly nastier reason is as follows.</p>

          <p>Some <code>texmf.cnf</code> files declare the location of
            the user-writable font directory though a setting like
<verbatim>VARTEXFONTS=$SELFAUTOPARENT/var/lib/texmf</verbatim>
            whereas others have something like
<verbatim>VARTEXFONTS=$TEXMFLOCAL/fonts</verbatim> Now,
            <code>$SELFAUTOPARENT</code> is a variable which is set by
            the kpathsea library to be the grandparent directory of
            the executable which uses the library.  So, for
            <code>/usr/bin/{tex,latex,mktexpk,...}</code>, it's
            <code>/</code>, but if your <code>dvi2bitmap</code> binary
            doesn't live with the other dvi-ware then its
            <code>$SELFAUTOPARENT</code> will be different, so that
            <code>dvi2bitmap</code> will look for fonts in a
            <em>different</em> place from the place where
            <code>mktexpk</code> put them when it successfully
            generated them.
          </p>

          <p>I would argue fairly strongly that having the
            <code>VARTEXFONTS</code> directory depend on the location
            of the dvi-ware <em>executables</em> is a very silly thing
            to do.  This was the case in the teTeX distribution which
            came with RedHat 6.0, though this was fixed pretty
            rapidly.  If you've fallen foul of this, then you can
            either
            <ul>
              <li>
                <p>change your <code>texmf.cnf</code> file to
                  something more like the second example above; or</p>
              </li>

              <li><p>install <code>dvi2bitmap</code> along with the
                  other TeXware.</p></li>
            </ul>
            I'd much prefer the first alternative, myself.
          </p>

          <p>A third option is to get <code>dvi2bitmap</code> to work
            around the problem, by telling it to claim to be some
            program which <em>is</em> installed along with the other
            dvi-ware.  You do this with the
            <code>--enable-fake-progname</code> option to the
            configuration script (see <ref
            id="conf.enable-fake-progname"/>).</p>
        </subsubsect>

        <subsubsect>
          <subhead>
            <title>Generating fonts by hand</title>
          </subhead>

          <p>If you didn't enable automatic font-generation, or if you
            did and something went wrong, you might have to generate
            fonts by hand.  You need to look at the documentation for
            your TeX system, specifically the <code>mktexpk</code> and
            <code>MakeTeXPK</code> scripts (one of which might be just
            an interface to the other).
          </p>

          <p>See the discussion of the `<code>make test</code>' script
            in <ref id="usage.fonts.finding"/>.  Also, note that the
            option <code>-Qg</code>, given to <code>dvi2bitmap</code>,
            displays the font-generation commands which would be
            required to build the fonts missing from the specified DVI
            file.  These are the commands which
            <code>dvi2bitmap</code> would employ to generate these
            fonts, when automatic-font-generation is enabled.
          </p>

          <p>Since dvi2bitmap's default resolution is 72 dpi, as
            opposed to the usual printer resolution of 300 or 600 dpi,
            you are unlikely to have suitable fonts on your system,
            and will need to generate them.  The program will generate
            these automatically, if it was configured with support for
            that (see <ref id="install.nonstarlink"/>); if it wasn't
            configured with that support, or if the automatic font
            generation fails, you might need to generate the fonts by
            hand.
          </p>

          <p>How you generate fonts depends on your TeX distribution.
            As explained in <ref id="usage.examples"/>, you can
            determine which fonts you need using the <code>-Qf</code>
            option.  The teTeX and TeXLive TeX distributions include
            scripts to generate fonts for you; if you have a different
            distribution, there might be a similar script for you to
            use, or you might have to do it by hand.  In the case of
            teTeX, the command you'd use in the example above would
            be:
<verbatim>
% MakeTeXPK cmr10 165 110 1.5 ibmvga
</verbatim>
            This would generate fonts using the
            <code>ibmvga</code> Metafont mode, using a base resolution
            of 110 dpi (the default for that mode), at a magnification
            of 1.5 times, giving a resultant resolution of 165 dpi.
          </p>

          <p>If you're using the TeXLive distribution, the equivalent
            command would be:
<verbatim>
% mktexpk --mfmode ibmvga --mag 1.5 --bdpi 110 --dpi 165 cmr10
</verbatim>
          </p>

          <p>If you want to use the same mode as you use for printing
            documents, then the mode <code>localfont</code> should do
            the right thing.  Otherwise, and probably better if these
            images are intended for the screen rather than paper, you
            could use a more specialised mode such as
            <code>ibmvga</code>, which has been tweaked to be readable
            at small resolutions.  See the file <code>modes.mf</code>
            somewhere in your metafont distribution for the list of
            possibilities.
          </p>

          <p>After you have created the fonts, try giving the command
<verbatim>
% kpsewhich pk cmr10.165pk
</verbatim>
            to confirm
            that TeX and friends can find the new fonts, and that your
            dvi2bitmap environment variable is set correctly.  This
            command is part of the <code>kpathsea</code> distribution,
            rather than the core TeX distribution, so may not be
            present on your system.
          </p>
        </subsubsect>

        <subsubsect id="usage.fonts.template">
          <subhead>
            <title>Font-string templates</title>
          </subhead>

          <p>The search-path and font-finder routes use font-string
            templates.  Here, the components of a font file name, or a
            font-finding command, are specified using placeholders like
            <code>%f</code>.  You may use

            <tabular>
              <tgroup cols="2">
                <tbody>
                  <row><entry><code>%M</code></entry><entry>mode
                      (eg. ibmvga)</entry></row>
                  <row><entry><code>%f</code></entry><entry>font name
                      (eg. cmr10)</entry></row>
                  <row><entry><code>%d</code></entry><entry>dpi
                      (eg. 330)</entry></row>
                  <row><entry><code>%b</code></entry><entry>base dpi
                      (eg. 110)</entry></row>
                  <row><entry><code>%m</code></entry><entry>magnification (eg. 3)</entry></row>
                  <row><entry><code>%%</code></entry><entry>%</entry></row>
                </tbody>
              </tgroup>
            </tabular>
            Thus, using these values as an example, if one of the
            entries in <code>DVI2BITMAP_PK_PATH</code> were <code
            type="fspath">/var/tmp/%M/%f.%dpk</code>, this would
            expand into <code
            type="fspath">/var/tmp/ibmvga/cmr10.330pk</code>.
            Alternatively, if we had given the font-finder script as
            <code>/usr/local/teTeX/bin/kpsewhich pk %f.%dpk</code>,
            the <code>dvi2bitmap</code> would have executed the
            command <code>.../kpsewhich pk cmr10.330pk</code>, which
            would have returned with a suitable font path.</p>
        </subsubsect>

      </subsect>
    </sect>

    <sect id="usagenotes" export="export">
      <subhead>
        <title>Usage notes</title>
      </subhead>

      <subsect id="usagenotes.fonts" export="export">
        <subhead>
          <title>Good choices of fonts and scaling</title>
        </subhead>

        <p>There is a certain amount of subtlety in choosing fonts and
          resolutions for maximum readability.</p>

        <p>The fonts that <code>dvi2bitmap</code> (currently) uses by
          default are from the <code>cmr</code> family, and generated
          using Metafont mode <code>ibmvga</code>, chosen because its
          design resolution, of 110 pixels to the inch, is
          approximately right for bitmaps viewed on the screen.  This
          is not, however, necessarily the optimal choice in all
          circumstances.</p>

        <p>You can produce some simple antialiasing by magnifying the
          output bitmaps then scaling them down, so that: 
<verbatim>
% dvi2bitmap --magnification=2 --scale=2 myfile.dvi
</verbatim>
          doubles the size of the bitmaps, then halfs it, effectively
          blurring it in the latter stage.  This works quite well.
          You don't <em>necessarily</em> get better results with
          larger factors (though it does, of course, depend on the
          situation), because Metafont already does some work to make
          the characters easier to read, and I suspect that excessive
          antialiasing merely frustrates this.</p>

        <p>If you choose a different Metafont mode, it can make a
          difference.  In your TeX distribution, there should be a
          file called <code>modes.mf</code>, containing a large
          collection of Metafont font-generation modes (look for it
          using <code>kpsewhich modes.mf</code> if you have that
          command), and there are several modes in this set which have
          resolutions in the 70 to 200 range, which are therefore
          about the right size to be useful in this context.  You're
          probably aiming for a resolution of around 100 pixels per
          inch, if you want the text in the output bitmap to be around
          the same size as the other text on your monitor.  For
          example, try the <code>ncd</code> and <code>nec</code>
          modes:
<verbatim>
% dvi2bitmap --magnification=2 --scale=2 --font-mode=ncd --resolution=95 try.dvi 
% dvi2bitmap --scale=2 --font-mode=nec --resolution=180 try.dvi 
% dvi2bitmap --magnification=2 --scale=4 --font-mode=nec --resolution=180 try.dvi
</verbatim>
          Note that the declared
          resolution must match the font mode -- the default
          resolution of 110 is designed to match the default mode of
          <code>ibmvga</code>.  Also the <code>nec</code> mode,
          because its base resolution is large anyway, only needs to
          be scaled down to get adequate antialiasing.</p>

        <p>It should be possible to create a Metafont mode
          specifically for <code>dvi2bitmap</code> applications.  That
          might be a useful project for someone!</p>

        <p>Another thing to look at is whether changing the font
          family can help.  The Computer Modern family is, of course,
          designed for paper.  The <webref
          url="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=concrete">Concrete
          Math family</webref>, though also designed primarily for
          paper, has features which make it particularly suitable for
          this application.  The <webref
          url="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=psfchoice">FAQ
          article which discusses maths font choices</webref> remarks
          that <blockquote><px>Since Concrete is considerably darker
          than Computer Modern, this variant may be of particular
          interest for use in low-resolution printing or in
          display-oriented applications such as posters,
          transparencies, or online documents.</px></blockquote> As
          well as this, these fonts have rather simpler outlines than
          Computer Modern <em>and</em> they are rather more upright,
          both of which make them more robust to being rendered at
          rather small resolutions.</p>

        <p>You can use the concrete maths fonts simply by adding the
          declaration
<verbatim>
\usepackage{concmath}
</verbatim>
          to the preamble of your LaTeX document.  In tests, the best
          configuration for clarity in a bitmap appeared to be a
          document using the concrete maths fonts, plus the
          <code>dvi2bitmap</code> invocation
<verbatim>
% dvi2bitmap --magnification=2 --scale=4 --font-mode=nec --resolution=180 try-cc.dvi
</verbatim>
        </p>

        <p>Any observations on this topic would be warmly
          appreciated.</p>

        <p>Many thanks to Doug du Boulay at <code>titech.ac.jp</code>
          for raising this issue, for thus prompting me to discuss the
          various options, and for then doing the critical testing
          work.</p>

      </subsect>

      <subsect id="usagenotes.pipe" export="export">
        <subhead>
          <title>Using dvi2bitmap in a pipe</title>
        </subhead>

        <p><code>dvi2bitmap</code> is perfectly happy reading DVI
          files from a pipe, so that
<verbatim>
cat myfile.dvi | dvi2bitmap --pipe -
</verbatim>
          will work perfectly well.
          Since the program knows that the standard input -- indicated
          by the <code>-</code> argument to <code>dvi2bitmap</code> --
          is not seekable, the option <code>--pipe</code> is actually
          redundant.  This is not by itself particularly useful, since
          TeX is not written to send its DVI output into a pipe.</p>

        <p>If, however, you make a `named pipe' beforehand, using the Unix
          <code>mkfifo</code> command (a FIFO, or first-in-first-out, is the
          other name for such an object), then TeX can be persuaded to send its
          output there.
<verbatim>
% mkfifo myfile.dvi
% ls -l myfile.dvi
prw-r--r--  1 norman  admin  0 Aug 12 00:18 myfile.dvi
% latex myfile &gt;myfile.stdout &amp;
% dvi2bitmap --pipe mkfile.dvi
</verbatim>
          Here, we create the FIFO using the <code>mkfifo</code>
          command; looking at it, we see that the first character on
          the <code>ls</code> line is a <code>p</code>, indicating the
          type of object it is.  We start (La)TeX going in the
          background (achieved by the <code>&amp;</code>), putting its
          chatty output into a file, and it merrily writes into the
          `file' <code>myfile.dvi</code>.  Immediately afterwards
          (we've shown this on two lines, but the two commands could
          be run together with only the <code>&amp;</code> separating
          them) we start <code>dvi2bitmap</code>, telling it to read
          from the named pipe.  The pipe effectively synchronises the
          two processes, so that if there is nothing to read,
          <code>dvi2bitmap</code> is briefly suspended, and if the
          pipe is full, LaTeX is suspended.  After this performance,
          the DVI file, <code>myfile.dvi</code> ends up zero size
          again, and the process can be repeated.</p>

        <p>You can go further than this, and use a FIFO for LaTeX's input,
          too:
<verbatim>
% mkfifo myfile.tex myfile.dvi
% cat foo.tex &gt;myfile.tex &amp; \
    latex '\input myfile.tex' &gt;myfile.stderr &amp; \
    dvi2bitmap --pipe myfile.dvi
</verbatim>
          (the trailing backslashes indicate that this second set of
          commands is all on one line).  The rather odd form of LaTeX
          invocation (note the quotes) stops TeX from peeking at the
          file, looking for the magic <code>%&amp;</code> line which
          can tell it which format to use; since the input is a pipe,
          it's unseekable, so we must use this form, or else LaTeX
          fails.</p>

      </subsect>

      <subsect id="usagenotes.multieqs" export="export">
        <subhead>
          <title>Processing many bitmaps</title>
        </subhead>

        <p>If you have a large number of fragments of TeX to process,
it is best not to invoke <code>dvi2bitmap</code> for each one
individually.  Also, the program does not (yet) allow you to specify
more than one DVI file as input.  In this situation, it is best to
generate an input TeX or LaTeX file which contains <em>all</em> of the
text you wish to process, with one fragment per page.</p>

        <p>For example, the following can help:
<verbatim>
\documentclass{article}
\pagestyle{empty}
\special{dvi2bitmap default imageformat png}
\newcommand{\neweq}[1]{\vfil\break\special{dvi2bitmap outputfile #1.png}}
\begin{document}

\neweq{index-html-alpha}
$\alpha$

\neweq{index-html-aprime}
$A'=(0,\alpha,0,0)$

[...]

\end{document}
</verbatim>
          That includes a special to make PNG the default output format, and
          defines a command sequence, <code>\neweq</code> which simultaneously
          forces a new page and inserts a special to name the output file.  A
          script which generates a file like this and then looks for the
          resulting bitmaps, with known names of course, can run very
          efficiently.  Combining that with the techniques in <ref
            id="usagenotes.pipe"/> can work wonders.</p>

      </subsect>

      <subsect id="usagenotes.marks" export="export">
        <subhead>
          <title>Using marks to position bitmaps</title>
        </subhead>

        <p>When including small images in an HTML page, it can be
          difficult to get the images to line up with the rest of the
          text, because a text with descenders (characters which go
          below the line such as `p' or `g') cause the image to be
          offset from the text line.  You can use the `mark' facility
          to tell you how much you need to offset such an image so
          that it lines up properly with the surrounding text.</p>

        <p>For example, consider the following usage:
<verbatim>
% cat temp.tex
\nopagenumbers
\noindent\special{dvi2bitmap mark}%
Hello, this is dvi2bitmap
\bye
% tex temp.tex
This is TeX, Version 3.14159 (Web2C 7.3.11)
(./temp.tex [1] )
Output written on temp.dvi (1 page, 240 bytes).
Transcript written on temp.log.
</verbatim>
          So, a simple test file with a single line in it, with descenders (the
          `p').  The `mark' special goes at the beginning, following \noindent.
          This is important, otherwise the point that is marked is the very
          top-left of the image, not the bottom-left.</p>

        <p>The output with <code>--query=bitmaps</code> is:
<verbatim>
% dvi2bitmap --verbose=quiet --query=bitmaps temp
Qbitmaps temp-page1.png 163 14 -1 11
</verbatim>
          ...where <code>verbose=quiet</code> has been used to turn
          off the usual chatter.  It tells us that the bitmap as a
          whole is 14pixels deep, and that the mark, which is on the
          TeX baseline, remember, is at position (-1,11) relative to
          an origin at the top-left of the bitmap; or in other words
          there's 3 pixels of space between the TeX baseline and the
          bottom of the image.  We therefore know that we need to
          offset the image by three pixels to make it line up
          properly.</p>

        <p>There are several ways to do that, but one way is to use
          per-element CSS properties, like this:
<verbatim><![CDATA[
% dvi2bitmap --verbose=quiet --query=bitmaps temp | awk  
'{printf "<img src=\"%s\" style=\"margin-bottom: %dpx\"/>\n", $2,  
$6-$4}'
<img src="temp-page1.png" style="margin-bottom: -3px"/>
%
]]></verbatim>
          So that's generated an <code>&lt;img&gt;</code> element
          which has the correct `src' attribute (from column 2 of the
          Qbitmaps line) and the correct offset (column6 - column4).
          That uses awk, but if you're generating your HTML pages with
          something like Perl or Pythn (substantially more sensible
          than awk...!), say, you could do an analogous thing with the
          dvi2bitmap output, and put the generated
          <code>&lt;img&gt;</code> elements in the correct places in
          the output HTML file. </p>

      </subsect>

    </sect>

    <sect id="libdvi2bitmap" export="export">
      <subhead>
        <title>The <code>libdvi2bitmap</code> library</title>
      </subhead>

      <p>The main bulk of the code which implements <code>dvi2bitmap</code>
        is in a library, and the program itself is a rather thin wrapper on
        top of this.  This library is intended to be usable for other
        applications.</p>

      <p>The library is written in C++, and provides an abstraction of DVI
        files, PK font files, Bitmaps, and various other objects used to build
        these ones.  By default, the build procedure creates both static and
        dynamic libraries.</p>

      <p>The library API is extensively documented in the
        <code>doc_libdvi2bitmap/</code> directory of the
        distribution.</p>

    </sect>

    <sect id="install" export="export">
      <subhead>
        <title>Building and installing dvi2bitmap</title>
      </subhead>

      <p>dvi2bitmap is packaged in two slightly different ways, one
        which respects the bundling conventions of the <webref
        url="http://www.starlink.rl.ac.uk">Starlink Project</webref>,
        and one which is more usual for network-distributed
        software.</p>

      <p>When you unpack the distribution tarball, you should find at
        least the files <code>dvi2bitmap_source.tar</code>,
        <code>Makefile.starlink</code> and <code>mk</code>.  If you're
        on a Starlink machine, you can, and should, build the software
        the Starlink way, using the <code>mk</code> script (see <ref
        id="install.starlink"/>); but if you're not, you should unpack
        the <code>dvi2bitmap_source.tar</code> file, and build it the
        conventional way (see <ref id="install.nonstarlink"/>).  Since
        the Starlink <code>mk</code> script is really just a driver
        for the Makefile within the tar file, you should get the same
        results both ways.
      </p>

      <subsect id="install.nonstarlink" export="export">
        <subhead>
          <title>General installation and configuration</title>
          <update versionid="upd1"><px>Added instructions on
              configuring in support for the kpathsea library</px></update>
          <update versionid="upd5"><px>Largely rewrote the
              configuration instructions, in an attempt to make them
              clearer.</px></update> 
          <update versionid="upd6"><px>Mentioned
              --enable-fake-progname</px></update>
          <update versionid="v0-7"><px>Described --enable-fontgen.  Rename of
              kpathsea option to --disable-kpathsea.  Addition of
              --enable-png.</px></update>
          <update versionid="v0-7-1"><px>Moved description of --enable-fontgen,
              and new default setting.</px></update>
          <update versionid="v0-9-5-1"><px>Changed the
              disable-kpathsea configuration option to
              without-kpathsea (see also release notes for this
              version).</px></update> 
        </subhead>

        <p>The package uses a automake/autoconf/libtool build system.
          Building should therefore be simple:
<verbatim>
% ./configure
% make
% make install</verbatim>

          but see the configuration options below.</p>

        <p>By default, both a static and a dynamic library are built.  If
          there is some reason why building the dynamic library fails on your
          platform, configure using <code>--disable-shared</code> and
          you'll build a static library only.</p>

        <p>It's a good idea to run <code>(cd test;make)</code> as
          well.  See <ref id="usage.fonts.finding"/>.</p> 

        <p>To install, just copy the executable
          <code>dvi2bitmap</code> wherever you want it to live.</p>

        <p>You can customise the program using flags to the
          <code>./configure</code> command:
          <dl>
            <update versionid="v0-9-7-1"><px>Corrected the URL for the
                Graphics File Format FAQ.</px></update>

            <dt><code>--with-kpathsea</code> and <code>--without-kpathsea</code>
</dt>
            <dd>
              <p>If you have the <code>kpathsea</code> library (see
                <ref id="usage.fonts.finding"/>) but don't, for some
                reason, want to use it, then give the configure option
                <code>--without-kpathsea</code>.  By default, the
                configuration enables use of the library if it is
                installed (that is, if the <code>kpathsea</code>
                include files and library are somewhere the compiler
                will find them.  If <code>kpathsea</code> is disabled
                (by default or by request), then fonts will not be
                generated by default.
              </p>

              <p>If you have the <code>kpathsea</code> library, but it
                is not in the standard place, then you can provide an
                argument to the <code>--with-kpathsea</code> option
                giving the name of a directory below which are
                directories <code>include</code> and <code>lib</code>,
                containing the required <code>kpathsea</code> include
                files and library.


                If you don't have the
                <code>kpathsea</code> library available, see below
                (<ref id="install.web2c"/>) for notes on obtaining
                it.
              </p>
            </dd>

            <dt><code>--disable-texmfcnf</code></dt>
            <dd>
              <p>The <code>kpathsea</code> library finds its
                configuration files in two ways, either automatically
                if it is installed in the same directory as the rest
                of the TeXware, or using the <code>TEXMFCNF</code>
                environment variable.  The <code>dvi2bitmap</code>
                program sets the latter variable internally, unless it
                finds it already set.  If this will be inconvenient,
                you can suppress this behaviour by providing the flag
                <code>--disable-texmfcnf</code>, or equivalently
                <code>--enable-texmfcnf=no</code>.
              </p>
            </dd>

            <dt id="conf.enable-fontgen"><code>--enable-fontgen</code></dt>
            <dd>
              <p>The program can attempt to generate fonts, and will
                do so using the MetaFont mode <code>ibmvga</code>,
                which has a resolution of 110 dots-per-inch.
              </p>

              <p>You can give an argument to this command, which
                specifies a command-line which will build and install
                a required font, and return its path on standard
                output.  This uses the font-string template described
                in <ref id="usage.fonts.template"/>.  You could
                duplicate the default (the <code>mktexpk</code> script
                if present) with the option
<verbatim>
--enable-fontgen='&lt;path&gt;mktexpk --dpi %d --bdpi %b --mag %m --mfmode %M %f'
</verbatim>
              </p>

              <p>The default for this option is `on' -- the program
                will attempt to generate fonts.  Do note, however,
                that if the <code>kpathsea</code> library is not
                enabled, then the program will <em>not</em> be able to
                find the fonts it generates, unless you configure it
                correctly using either <code>-fp</code> or
                <code>DVI2BITMAP_PK_PATH</code> (see <ref
                id="usage.fonts.finding"/>).
              </p>

              <p>If you wish to disable this automatic font
                generation, give the option
                <code>--disable-fontgen</code>.  Note that this does
                not completely disable font generation -- it merely
                sets the default for font generation to `off', and it
                can be switched back on again using the option
                <code>-fG.</code>
              </p>

              <p>If you wish to change the default mode, you can do so
                using the option <ref id="conf.fontgen-mode"/>.
              </p>
            </dd>

            <dt id="conf.fontgen-mode">
              <code>--with-fontgen-mode=mode,res</code></dt>
            <dd>
              <p>If you wish to change the default parameters for
                font-generation, you can set both the Metafont mode
                and resolution using this option.  For example, the
                option <code>--fontgen-mode=pcprevw,118</code> will
                make <code>pcprevw</code>, which has a resolution of
                118 dpi, the default MetaFont mode.  Note that the
                resolution you specify <em>must</em> match the mode:
                see file <code>modes.mf</code> for a list of modes and
                resolutions (use <kbd>kpsewhich mf modes.mf</kbd> to
                find this).  You can change the resolution and mode on
                the fly using the <code>-fm</code> and <code>-r</code>
                options to the compiled program (<ref
                id="usage.options"/>).
              </p>
            </dd>

            <dt id="conf.with-fontfinder">
              <code>--with-fontfinder</code></dt>
            <dd>
              <p>This specifies a command to run to find fonts.  It is
                preferable to use the <code>kpathsea</code> library if
                possible, but if this is difficult, then you can
                specify a script to run to find fonts.  This uses the
                font-string template described in <ref
                id="usage.fonts.template"/>.  To use the standard
                <code>kpsewhich</code> command, for example, you could
                give the option
<verbatim>
--with-fontfinder='/usr/local/teTeX/bin/kpsewhich pk %f.%dpk'
</verbatim>
              </p>
            </dd>

            <dt><code>--enable-mktexpk</code> and
              <code>--enable-maketexpk</code></dt>
            <dd>
              <p>In the default configuration, the program will
                generate missing fonts using one of the standard
                scripts present in most TeX distributions.  The
                configuration process looks first for
                <code>mktexpk</code> then <code>MakeTeXPK</code>, and
                uses whichever it finds first.  If you have both
                scripts but wish to use <code>MakeTeXPK</code> for
                some reason, you will have to give the option
                <code>--disable-mktexpk</code>; if you wish to disable
                both, you will have to give
                <code>--disable-maketexpk</code> as well.  Both
                options take an optional argument giving the path to
                an alternative script with the same calling interface.
              </p>
            </dd>

            <dt><code>--with-png</code> (default: enabled)</dt>
            <dd>
              <p>If you give this option, and if the PNG library is
                installed (needs a version after 0.96), then the
                program will be compiled with support for PNG bitmaps
                as an output format.  You can obtain the PNG library
                from the <webref
                url="http://www.libpng.org/pub/png/">PNG home
                page</webref>.  You can disable the use of PNG with
                the option <code>--without-png</code>.
              </p>
            </dd>

            <dt><code>--enable-gif</code> (default: disabled)</dt>
            <dd>
              <p>The program generates only XBM bitmaps by default.
                If you want it to be able to generate GIFs, then give
                the configure option <code>--enable-gif</code>.  The
                GIF format is the copyright of CompuServe.  As far as
                I understand it, one does not need a licence from
                CompuServe if one is distributing non-commercial,
                not-for-profit software, such as this.  You probably
                shouldn't enable GIF support when you build this
                program unless you're in that category as well.  But
                don't listen to me: there's a much fuller account of
                the whole sorry business in the <webref
                url="ftp://rtfm.mit.edu/pub/usenet/news.answers/graphics/fileformats-faq">Graphics
                File Formats FAQ</webref> (<webref
                url="http://www.oreilly.com/centers/gff/gff-faq/gff-faq1.htm">HTML</webref>).
              </p>
            </dd>

            <dt id="conf.enable-fake-progname">
              <code>--enable-fake-progname</code></dt>
            <dd>
              <p>This option enables a workaround which allows
                <code>dvi2bitmap</code> to have the expected behaviour
                when (a) you do not install <code>dvi2bitmap</code>
                along with the other dvi-ware, <em>and</em> (b) your
                <code>texmf.cnf</code> file has
                <code>VARTEXFONTS</code> (or a similar variable)
                depending on one of the <code>SELFAUTO...</code>
                variables (such a <code>texmf.cnf</code> file is
                probably broken, but that may not be your problem, or
                within your power to fix).  This option makes
                <code>dvi2bitmap</code> claim to be a different
                DVI-reading program which <em>is</em> installed in the
                standard place.  See <ref
                id="usage.fonts.notfinding"/> for discussion.  The
                configuration script uses the location of the
                <code>xdvi</code> program by default, but you can
                override this by giving the full path to an
                alternative as an argument to this option (that is,
                <code>--enable-fake-progname=/path/to/dviprog</code>). </p>

              <p>Since this uses undocumented behaviour of the library
                (`use the source, Luke!'), you almost certainly
                shouldn't enable it unless you have to.
              </p>
            </dd>

            <dt><code>--with-path-seps</code></dt>
            <dd>
              <p>The default configuration is for Unix, and uses the
                Unix defaults for filesystem path and search path
                separators.  If you are building it on some other
                architecture, you can alter the defaults by giving a
                two-character argument to this option, giving the two
                separators in order.  For example, the arguments
                appropriate for DOS would be
<verbatim>--with-path-seps='\;'</verbatim>
              </p></dd>

          </dl>
        </p>

        <p>The <code>./configure</code> command without any options is
          equivalent to <code>./configure --with-kpathsea --with-png
          --enable-mktexpk</code> (meaning that kpathsea and PNG
          output will be enabled if library support for them is
          found).
        </p>

        <p>
          <update versionid="v0-9-6"><px>Added `version' column to
              table, noting which version was actually tested.</px></update>
          The program builds successfully on (at least):

          <blockquote>
            <px>
              <tabular>
                <tgroup cols="3">
                  <thead>
                    <row>
                      <entry>Platform</entry>
                      <entry>Version</entry>
                      <entry>Compiler</entry>
                    </row>
                  </thead>

                  <tbody>
                    <row>
                      <entry>powerpc-apple-darwin6.6 (MacOS X, 10.2.6)</entry>
                      <entry>0.11b1</entry>
                      <entry>g++ 3.1 20020420 (prerelease)</entry>
                    </row>
                    <row>
                      <entry>sun-sparc-solaris2.9</entry>
                      <entry>0.11b1</entry>
                      <entry>CC: Sun WorkShop 6 update 2 C++ 5.3
                        2001/05/15</entry></row>
                    <row>
                      <entry>alphaev67-dec-osf5.1</entry>
                      <entry>0.11b1</entry>
                      <entry>Compaq C++ V6.5-014</entry>
                    </row>
                    <row>
                      <entry>i686-pc-linux-gnu (RedHat 7.3)</entry>
                      <entry>0.11b1</entry>
                      <entry>g++ 2.96</entry></row>
                    <row>
                      <entry>i686-pc-linux-gnu (RedHat 7.3)</entry>
                      <entry>0.10</entry>
                      <entry>gcc 2.96</entry>
                    </row>
                    <row>
                      <entry>i686-pc-linux-gnu (RedHat 6.2)</entry>
                      <entry>0.10b1</entry>
                      <entry>egcs-2.91.66</entry>
                    </row>
                    <row>
                      <entry>powerpc-apple-darwin6.4 (MacOSX 10.2)</entry>
                      <entry>0.10</entry>
                      <entry>g++ 3.1 20020420 (prerelease)</entry>
                      <!-- g++ -version  --></row>
                    <row>
                      <entry>sparc-sun-solaris2.8</entry>
                      <entry>0.10b1</entry>
                      <entry>egcs-2.91.66</entry>
                    </row>
                    <row>
                      <entry>alphaev56-dec-osf5.0</entry>
                      <entry>0.10b1</entry>
                      <entry>egcs-2.91.66</entry>
                    </row>
                    <row>
                      <entry>i686-pc-linux-gnu (RedHat 6.2)</entry>
                      <entry>0.9-7p1</entry>
                      <entry>egcs-2.91.66</entry></row>
                    <row>
                      <entry>powerpc-unknown-linux-gnu (Mac mklinux
                        DR-0.3?)</entry>
                      <entry>0.9</entry>
                      <entry>egcs-2.90.25 980302 (egcs-1.0.2 prerelease)</entry>
                    </row>
                    <row>
                      <entry>sparc-sun-solaris2.7</entry>
                      <entry>0.9</entry>
                      <entry>egcs-2.91.66</entry>
                    </row>
                    <row>
                      <entry>sparc-sun-solaris2.7</entry>
                      <entry>0.9</entry>
                      <entry>gcc 2.8.1</entry>
                    </row>
                    <row>
                      <entry>sparc-sun-solaris2.7</entry>
                      <entry>0.9-6</entry>
                      <entry>WorkShop Compilers 5.0 98/12/15 C++
                      5.0</entry>
                    </row>
                    <row>
                      <entry>alpha-dec-osf4.0f</entry>
                      <entry>0.9-6</entry>
                      <entry>Compaq C++ V6.2-024 for Digital UNIX V4.0F</entry>
                    </row>
                    <row>
                      <entry>i386-pc-solaris2.6</entry>
                      <entry>0.9-7p1</entry>
                      <entry>gcc v2.8.1/libstdc++ v2.8.1.1</entry>
                    </row>
                  </tbody>
                </tgroup>
              </tabular>
            </px>
          </blockquote>
          The `version' column is the last version which was actually tested on
          that platform/compiler combination.  Reports of compilations on other
          platform/compiler combinations gratefully received.
        </p>

        <p>It should be written in standards-conforming C++, so if it
          doesn't build then (1) it's not as conformant as I think it
          is (in which case please tell me), (2) your compiler is not
          as conformant as you think it is (in which case please don't
          tell me), or (3) you need to invoke some magic to get the
          compiler to be conformant (in which case tell me, if there's
          something I can do in the autoconfigure script).
        </p>

        <p>You can override the C++ compiler the configure script will
          choose by setting the environment variable <code>CXX</code>,
          either via 
<verbatim>% CXX=cxx ./configure</verbatim>
or
<verbatim>% env CXX=cxx ./configure</verbatim>
          depending on your shell.</p>

        <p>Run regression tests with <code>(cd test;make)</code> in
          the build directory.  This includes a separate whole-program
          test which additionally gives advice about setting
          environment variables.  You can run this script separately
          with the command <code>(cd test;make pathtest)</code></p>

        <p>Regression test 6 currently fails to link when using Compaq
          <code>cxx</code>, for some arcane C++ reason I have yet to
          diagnose.  The whole-script test mentioned above works,
          though.</p>

        <subsubsect id="install.web2c">
          <subhead>
            <title>Obtaining the <code>kpathsea</code> library</title>
            <update versionid="v0-7"><px>Improved instructions on
                getting the kpathsea library source.</px></update>
          </subhead>

          <p>Not all TeX distributions install the
            <code>kpathsea</code> library, even though they install
            applications built with it, and the <code>texmf.cnf</code>
            configuration file which controls it.
          </p>

          <p>If the library does not appear to be in your
            distribution, then you can obtain and build it yourself.
            The library is distributed as part of the
            <code>web2c</code> (Unix TeX source) distribution, which
            you can find at
            <url>ftp://ftp.tug.org/tex/web2c.tar.gz</url>, or mirrored
            on CTAN sites (for example at
            <url>http://www.tex.ac.uk</url> in directory <code
            type="fspath">systems/web2c</code>).
          </p>

          <p>Take a copy of the library (this is a <em>big</em>
            distribution), and unpack it.  Go into the
            <code>kpathsea</code> directory and do the usual
            `<code>./configure; make; make install</code>' routine.
            With (some?)  older distributions of the library this
            appeared not to work, and you had to go to the parent of
            the <code>kpathsea</code> directory, delete the web2c
            directory (which is the bulk of the distribution), then
            configure and build it as usual, ignoring the warnings
            about the missing main <code>texmf</code> tree.
          </p>

        </subsubsect>

      </subsect>

      <subsect id="install.starlink" export="export">
        <subhead>
          <title>Starlink nodes</title>
          <update versionid="v0-9-4"><px>Added a note discussing the
              <code>export_run</code> distribution bundle, and possible
              problems with it.</px></update>
        </subhead>

        <p>If you are on a Starlink node, then you should be able to
          use the usual <code>mk</code> script.  Define the
          environment variables <code>INSTALL</code> and
          <code>SYSTEM</code> as usual.  <code>SYSTEM</code> can be
          any one of the Starlink-supported platforms
          <code>ix86_Linux</code>, <code>alpha_OSF1</code> or
          <code>sun4_Solaris</code>.  Then give the commands
<verbatim>% ./mk build
% ./mk install</verbatim>
</p>

        <p>This build configures support for GIFs, plus support for
          the <code>kpathsea</code> library if that library is present
          on the system (it is not distributed with this package and
          not present by default on all project machines).
        </p>

        <p>There are some issues involved in creating, and hence in
          installing, an <code>export_run</code> distribution.  Part
          of the configuration of <code>dvi2bitmap</code> involves
          establishing the location, on the build system, of
          font-building scripts and TeX configuration files.  However,
          the point of the <code>export_run</code> distributions is
          that it should run on systems <em>other</em> than the build
          system.  We deal with this by (a) configuring
          <code>dvi2bitmap</code> to use a custom font-building
          script, which is distributed and installed with the package,
          and which is simply an interface to whichever of the real
          font-builders is available on the target system, and (b)
          configuring it with <code>--disable-texmfcnf</code>.  The
          former should be OK as long as one of <code>mktexpk</code>
          and <code>MakeTeXPK</code> is in the path after
          installation.  The latter, however will cause a problem if
          <code>kpathsea</code> is enabled (which may or may not be
          the case for the <code>export_run</code> system), since this
          will probably <em>fail</em> unless the environment variable
          <code>TEXMFCNF</code> is defined (see <kbd>kpsewhich cnf
          texmf.cnf</kbd>).  You can see what features are enabled
          with the command <kbd>dvi2bitmap -V</kbd>.
        </p>

      </subsect>
    </sect>

    <sect id="developments" export="export">
      <subhead>
        <title>Bugs, extras, and further developments</title>
        <update versionid="v0-7-1"><px>Added bugreport
            address</px></update>
      </subhead>

      <p>To report bugs, please send to
        <code>norman@astro.gla.ac.uk</code> a brief description of the
        problem; a minimal TeX file which reproduces it; some
        indication of the machine you're running on (<kbd>uname
        -a</kbd> is good); and the output of <kbd>dvi2bitmap -V</kbd>,
        which shows the options you have enabled.
      </p>

      <p>See the <code>TODO</code> list in the distribution, for the
        list of things I at least would like to see added to the
        code.</p>

      <p>Bright ideas, fixes and (especially) implementations,
        cheerfully received.</p>

      <p>In the <code type="fspath">.../extras</code> directory of the
        distribution is a script <code>img-eqlist.pl</code>, which transforms a
        file of LaTeX fragments into a LaTeX file, keeping track of
        filenames, and avoiding generating duplicate bitmaps for duplicated
        maths.</p>

    </sect>

    <sect id="refs" export="export">
      <subhead>
        <title>References and acknowledgements</title>
      </subhead>

      <p>CTAN, the Comprehensive TeX Archive Network, is <em>the</em>
        repository of TeX and LaTeX documentation.  The archive is
        mirrored in numerous places, but the UK node is at
        <url>http://www.tex.ac.uk</url>.
      </p>

      <p>DVItype and PKtoPX are two programs Donald Knuth intended as
        model DVI and PK file readers, and as containers for the
        canonical documentation of the DVI and PK file formats.  They
        might be available as part of your TeX distribution, but are
        also available on CTAN, in <code
        type="fspath">/tex-archive/systems/knuth/texware/dvitype.web</code>
        and <code
        type="fspath">/tex-archive/systems/knuth/pxl/pktopx.web</code>.
      </p>

      <p>The <cite>DVI Driver Standard, Level 0</cite> is available on
        CTAN, in directory <code
        type="fspath">/tex-archive/dviware/driv-standard</code>.  This
        incorporates sections of the DVItype documentation.  This
        program claims to conform to this standard: if it doesn't,
        please let me know.
      </p>

      <p>Thanks for bug reports and other suggestions to <webref
        url="http://www.cis.ohio-state.edu/~gurari/">Eitan
        Gurari</webref> (heroic tester), Oliver Schurr and Oleg
        Bartunov (<code>oleg@sai.msu.su</code>).
      </p>

      <p>Yamabe Kazuharu (<code>tako_da@qc4.so-net.ne.jp</code>)
        supplied the writer for XPM bitmaps.</p>

    </sect>

    <appendices>

      <sect id="sgml.maths" export="export">
        <subhead>
          <title>Maths and SGML/HTML</title>
        </subhead>

        <p>
          <ul>
            <li>
              <p><webref url="http://www.w3.org/Math/">W3C's maths
                WG</webref>.  This covers <webref
                url="http://www.w3.org/TR/REC-MathML/">MathML</webref>,
                which is now a W3C Recommendation.  The working group
                also supports the <webref
                url="http://lists.w3.org/Archives/Public/www-math/">www-math</webref>
                mailing list.  </p>

            </li>

            <li>
              <p><webref
                url="http://www.oasis-open.org/cover/topics.html#sgml-math">Maths
                special topic at the SGML web page</webref> </p></li>

            <li><p>Also, <webref
                url="http://www.oreilly.com/people/staff/crism/math/">maths
                proposal from O'Reilly</webref>.  </p></li>

            <li><p><webref
                url="http://indy.cs.concordia.ca/mathml/">MathML at
                Concordia</webref> </p></li>

          </ul>
        </p>

        <subsect id="sgml.maths.latex" export="export">
          <subhead>
            <title>LaTeX maths within HTML</title>
          </subhead>

          <p>The <em>real</em> issue here (for me at least) is
            rendering equations within an HTML document.  There are
            several tools available which can do that with different
            trade-offs. The most popular method is to write the
            equations in a LaTeX document, process it, and then hoik
            the equations out of the resulting DVI file somehow
            (typically using <code>dvips</code> and a postscript to
            gif converter), and display them on the web as gifs.  The
            big disadvantage with this is that you get an awful lot of
            gifs, and the conversion is rather inefficient.
          </p>

          <p>All this hassle <em>should</em> become irrelevant once we
            get browsers which can render MathML directly.
          </p>

          <p>There are reviews of the problems, and some of the tools,
            in articles <webref
            url="http://forum.swarthmore.edu/typesetting/index.html"><cite>Maths
            Typesetting for the Internet</cite></webref>, and <webref
            url="http://hutchinson.belmont.ma.us/tth/mmlreview/"><cite>Comparative
            Review of World-Wide-Web Mathematics
            Renderers</cite></webref>.
          </p>

          <p><webref
            url="http://www.tex.ac.uk/tex-archive/support/latex2html/">LaTeX2HTML</webref>
            is the granddaddy of these translators -- it parses the
            LaTeX using Perl, and spits out HTML, turning maths into
            gifs.  It's very robust by now.
          </p>

          <p>John Walker's <webref
            url="http://www.fourmilab.ch/webtools/textogif/textogif.html">textogif</webref>
            is a Perl program which orchestrates the various tools to
            do the conversion via postscript, once you've generated
            the DVI file.  It works, but it's <em>terribly</em> slow,
            which was the motivation for this program.
          </p>

          <p><webref
            url="http://www.cis.ohio-state.edu/~gurari/TeX4ht/mn.html">TeX4ht</webref>
            (TeX for Hypertext) uses TeX's own parser, but still
            produces equations as gifs.  TeX4ht can also emit MathML
            from LaTeX.  The TeX4ht documentation has a useful
            collection of resources.  There's an alternative location
            for TeX4ht <webref
            url="http://www.tug.org/applications/tex4ht/mn.html">at
            TUG</webref>.
          </p>

          <p><webref url="http://hutchinson.belmont.ma.us/tth/">tth:
            TeX to HTML translator</webref> (<webref
            url="http://hutchinson.belmont.ma.us/tth/manual.cgi">manual</webref>).
            <code>tth</code> translates LaTeX maths directly to HTML,
            with remarkable success and astonishing speed, and with
            good failure strategies.  It works very sweetly, but (a)
            requires you to tweak your browser to have it map the
            symbol font appropriately, and (b) the resulting HTML
            can't be printed legibly.  From the same source is <webref
            url="http://hutchinson.belmont.ma.us/tth/mml/">TtHMML</webref>,
            which translates (La)TeX to HTML plus MathML.
          </p>

          <p><update versionid="v0-9-6"><px>Updated nDVI
                URL</px></update><webref
              url="http://www.nikhef.nl/~t16/public/ndvi/ndvi_doc.html">nDVI</webref>
            is a DVI viewer plugin for Unix Netscape.  This addresses
            the problem at the client end.
          </p>
        </subsect>

        <subsect id="sgml.maths.other" export="export">
          <subhead>
            <title>Other approaches to maths</title>
          </subhead>

          <p>A quite different approach is to use a different markup
            for maths, possibly requiring specialised client software.
            These other notations typically use semantic markup --
            expressing the structure of the maths.  At first sight,
            this seems preferable to LaTeX's presentational markup,
            but its weaknesses for authoring are exposed (I feel) when
            you realise that maths is not as closed and unambiguous a
            language as computer scientists feel it ought to be.
            Semantic markup's strength is in interfaces with computer
            algebra systems, and databases -- Abramowitz and Stegun
            would be ideal in this form!  The major dislocation
            between the two approaches is what makes conversion from
            presentational to semantic markup so easy.  In passing,
            I'll note that MathML has both a presentational and a
            semantic variant.
          </p>

          <p><webref
            url="http://www.lfw.org/math/top.html">MINSE</webref> uses
            a server to render maths into gifs on the fly.  It seems
            to work rather nicely, but works with its own semantic
            maths notation.
          </p>

          <p>There is (was?) a project called <webref
            url="http://www.dcs.fmph.uniba.sk/~emt/">Euromath</webref>,
            which includes a structured SGML editor.  This project
            included a converter which could transform <webref
            url="http://www.dcs.fmph.uniba.sk/~emt/EmSystem.html#editor">LaTeX
            to Euromath SGML</webref>.
          </p>

          <p><webref
            url="http://www.nag.co.uk/projects/OpenMath/">OpenMath</webref>
            might be a successor to Euromath.  It's an EC Esprit
            project which `proposes to develop standards for the
            semantically-rich representation of mathematics'.
          </p>

          <p><webref
            url="http://www.albany.edu/~hammond/gellmu/">GELLMU</webref>
            is a LaTeX-like markup language, intended to be easy to
            convert to SGML.  Specifically, it is intended to support
            maths (and hence conversion to MathML) well.
          </p>

          <p>The following are specifically concerned with maths in
            SGML, using either MathML or other maths DTD fragments.
          </p>

          <p><webref url="http://www.webeq.com/">WebEQ</webref> is a
            suite of Java programs which implement MathML.  It's
            commercial.
          </p>

          <p><webref
            url="http://www.alphaworks.ibm.com/formula/texml">TeXML</webref>
            is a gadget from IBM which converts XML to TeX via a DTD
            fragment.  You transform your XML to an equivalent
            document marked up in TeXML, which you then separately
            transform to TeX.
          </p>

          <p><webref
            url="http://www.w3.org/People/Raggett/EzMath">EzMath</webref>
            is a Dave Raggett proposal for producing maths on the web.
            It uses yet another notation, and converts it to online
            form using a plugin (no printing, and Windows only, as of
            April 1999).
          </p>

        </subsect>

      </sect>

      <sect id="tex.dimensions" export="export">
        <subhead>
          <title>TeX dimensions</title>
        </subhead>

        <p>When producing this program, I became terribly confused
          about the variety of dimensions which appear in DVI and PK
          files.  <ref id="tsizes"/> is a summary of the sizes which
          appear, for the benefit of anyone else attempting a project
          like this.  The reference [Dn] refers to section `<m
          notation="latexmaths">n</m>' of the webbed DVItype document
          and [Pn] to section `<m notation="latexmaths">n</m>' of the
          PktoPX document (see <ref id="refs"/>).
        </p>

        <p>If you feel I have misunderstood something here, or got one of the
          conversion factors wrong (I hate these!), please correct me.</p>

        <table float="float" id="tsizes">
          <caption><px>Sizes in TeX</px></caption>

          <tabular frame="all">
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Context</entry>
                  <entry>Description</entry>
                  <entry>See</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>DVI preamble</entry>
                  <entry><code>num</code>, <code>den</code>: multiply
                  a `DVI unit' by <m
                  notation="latexmaths">\mbox{num}/\mbox{den}</m> to
                  obtain a length in units of <m
                  notation="latexmaths">10^{-7}\mathrm{m}</m></entry>
                  <entry>[D17]</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><code>mag</code>: DVI units are actually multiplied by
                    <m notation="latexmaths">(\mbox{num} \times
                      \mbox{mag}) / (1000\times\mbox{den})</m></entry>
                  <entry>[D17]
                  </entry>
                </row>
                <row>
                  <entry>DVI font definition</entry>
                  <entry><code>d</code>: a design size, in DVI units.
                    The nominal size of the font.</entry>
                  <entry>[D18]</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><code>s</code>: a `fixed point' scale factor, range
                    <m notation="latexmaths">2^{27}&gt;s&gt;0</m>,
                    scaling <code>d</code> (see note).</entry>
                  <entry>[D18]</entry>
                </row>
                <row>
                  <entry>PK preamble</entry>
                  <entry><code>ds</code>: the font design size in
                    units of <m notation="latexmaths">2^{-20}</m>
                    points.</entry>
                  <entry>[P12]</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><code>hppp</code>, <code>vppp</code>: number
                    of pixels per point, times <m
                      notation="latexmaths">2^{16}</m> (see note).</entry> 
                  <entry>[P12]</entry>
                </row>
                <row>
                  <entry>Character</entry>
                  <entry><code>tfmwidth</code>: the width of the
                    character (see note).</entry>
                  <entry>[D37], [P9]</entry></row>
                <row>
                  <entry></entry>
                  <entry><code>w</code>, <code>h</code>: the width and
                  height, in pixels, of the character pixel map.</entry>
                  <entry>[P21]</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><code>hoff</code> and <code>voff</code>:
                    offset of the pixel map from the reference point.</entry>
                  <entry>[P21]</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><code>dm</code>, <code>dx</code>,
                    <code>dy</code>: the pixel
                    escapements. <code>dm</code> in pixels,
                    <code>dx</code> and <code>dy</code> in pixels times
                    <m notation="latexmaths">2^{16}</m> (see
                    note).</entry>
                  <entry>[P21]</entry>
                </row>
              </tbody>
            </tgroup>

          </tabular></table>

        <p>
          <ol>
            <li>
              <p><code>s</code> scales the design size, so that a font
                is actually used at <m
                notation="latexmaths">(\mbox{s} \times \mbox{mag}) /
                (1000\times\mbox{d})</m> 
                times its normal size.
              </p>
            </li>

            <li>
              <p><code>hppp</code> and <code>vppp</code> aren't used
                as sizes, but can be used to check you have the right
                fonts by comparing resolution, etc..
              </p>
            </li>

            <li>
              <p><code>tfmwidth</code> is the `physical' size of a
                character, and is the only size that TeX uses in its
                calculations, and which the DVI reader uses when
                working out how far to move the reference point when
                it sets a character.  This is defined in [P9] to be in
                units of <code>FIXes</code>, where one
                <code>FIX</code> is <m
                notation="latexmaths">2^{-20}</m> times the design
                size in points.  [D37] describes how to multiply these
                widths by scaling factors without overflowing.
              </p>
            </li>

            <li>
              <p>The difference between the pixel escapements and
                <code>tfmwidth</code> is that the latter is a
                resolution-independent shift of the DVI reference
                point, and the former is the PK file's recommendation
                of the number of pixels the DVI processor should
                actually move.  The DVI processor keeps track of the
                two reference points, and readjusts the pixel-based
                one when rounding errors move it too far from the
                resolution-independent one.  See [D89] and [D91]; also
                [D40].
              </p>
            </li>
          </ol>
        </p>

        <p>A few useful conversions are:
          <ul>
            <li>
              <p>The design size of a font is a physical length, of <m
                notation="latexmaths">\mbox{ds}/2^{20}</m>
                points. [P12]
              </p>
            </li>

            <li>
              <p>A <code>FIX</code> is a physical size, of length
                <m notation="latexmaths">(\mbox{designsize})/2^{20}</m>
              </p></li>

            <li>
              <p>A TFM width is a physical size.  The
                <code>tfmwidth</code> parameter is in units of
                <code>FIXes</code>, so that the TFM width is a length
                of <code>tfmwidth</code> fixes, which is equal to <m
                notation="latexmaths">\mbox{tfmwidth}/2^{20} \times
                \mbox{ds}/2^{20}</m> points.</p>
            </li>

            <li>
              <p>Writing `dviu' for the unit `DVI units', `sp' for the scaled point
                of <m notation="latexmaths">2^{-16}</m> points, `px'
                for pixels, and <m notation="latexmaths">d\mu</m> for
                Knuth's deci-micron, or <m
                notation="latexmaths">10^{-7}\mathrm{m}</m>, 
                <meqnarray>
                  <mline notation="latexmaths">1\mathrm{sp} = \frac{1}{2^{20}}\mathrm{pt} &amp; = &amp; 
                    \frac{25400000}{7227\times 2^{16}} d\mu</mline>
                  <mline notation="latexmaths">7227\mathrm{pt} &amp; =
                    &amp; 254\mathrm{cm} = 25400000 d\mu</mline>
                  <mline notation="latexmaths">1\mathrm{dviu} &amp; = &amp; \frac{\mathrm{num}\times\mathrm{resolution}}%
                    {\mathrm{den}\times 254000} \mathrm{px}</mline>
                  <mline notation="latexmaths">1\mathrm{dviu} &amp; = &amp; \frac{\mathrm{num}\times 7227}%
                    {\mathrm{den}\times 25400000} \mathrm{pt}</mline>
                </meqnarray>
              </p>
            </li>

          </ul>
        </p>

      </sect>

      <sect id="rn" export="export">
        <subhead>
          <title>Release notes</title>
        </subhead>

        &releasenotes;
      </sect>

    </appendices>

    <backmatter/>

  </docbody>
</ssn>
