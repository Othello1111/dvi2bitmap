dnl
dnl   Configure script for dvi2bitmap
dnl
dnl   Copyright 1999, Particle Physics and Astronomy Research Council.
dnl   See file LICENCE for conditions.


AC_REVISION($Revision$)dnl


AC_INIT(dvi2bitmap.cc)

dnl   Use a config file (the list of settings is getting too long)
AC_CONFIG_HEADER(config.h)

dnl   Say where the install-sh, config.guess and config.sub scripts are
AC_CONFIG_AUX_DIR(config)

dnl   Checks for programs.
AC_PROG_CXX
AC_PROG_RANLIB

dnl   use C++ to compile test programs
AC_LANG_CPLUSPLUS

dnl   Does -MM option work?
AC_MSG_CHECKING(whether ${CXX} -MM does the Right Thing)
AC_SUBST(CXXMM)
cat <<EOD >conftest.cc
#include <stdio.h>
#include "DviError.h"
void f(){}
EOD
if AC_TRY_COMMAND([${CXX} -MM conftest.cc >conftest.Mout 2>&1]); then
  if grep 'stdio.h' conftest.Mout >/dev/null 2>&1; then
    AC_MSG_RESULT([nearly, but not nearly enough])
  else
    CXXMM=-MM
    AC_MSG_RESULT(yes)
  fi
else
  AC_MSG_RESULT(no)
fi
rm -f conftest*

AC_PATH_PROG(PERL, perl)

dnl   Checks for header files.  I don't actually use these defines within
dnl   the program, so there doesn't seem much point in testing for them. 
dnl   I think everything I use is in invoked in the place it's supposed to
dnl   be according to the C++ standard (with the possible exception of the
dnl   things in GIFBitmap.cc), so if anything goes wrong here, it's the 
dnl   compiler's fault, not mine.
dnl AC_HEADER_STDC
dnl AC_CHECK_HEADERS(fcntl.h unistd.h)
AC_CHECK_HEADERS(assert.h)

dnl   Check if we've got sstream.  If not, we'll assume we have the older
dnl   strstream
AC_CHECK_HEADERS(sstream)

dnl   Checks for library functions (...nor these)
dnl AC_FUNC_VPRINTF
dnl AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(popen)

dnl   What type of system are we on?
dnl   The alpha cxx compiler currently (v6.0) needs to be invoked with 
dnl   __USE_STD_IOSTREAM defined, so that it uses a standards-conforming 
dnl   streams library.  See Digital C++ v6.0 manual, section 7.1.2.
dnl   This is defined by default when the compiler is invoked with
dnl   `-std strict_ansi', but that's a little harder to arrange in here.
AC_CANONICAL_HOST
case "$host" in
  alpha*) test "$CXX" = "cxx" && AC_DEFINE(__USE_STD_IOSTREAM) ;;
esac

dnl   Do we have (standard) <cname> for C libraries, or just <name.h>?
AC_MSG_CHECKING(whether compiler has <cname> instead of just <name.h>)
AC_TRY_COMPILE([#include <cstdio>],,
  AC_DEFINE(HAVE_CSTD_INCLUDE)
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no))

dnl   Are the standard functions in the std namespace?
AC_MSG_CHECKING(whether standard functions are in namespace std)
AC_TRY_COMPILE([#include <ostream>], [cout << "Hello\n";],
  AC_MSG_RESULT(no),
  AC_TRY_COMPILE([#include <ostream>], [using namespace std;cout<<"Hello\n";],
    AC_DEFINE(HAVE_STD_NAMESPACE)
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(ARGHH -- error compiling)))

dnl   Specify support for Kpathsea library
dnl
dnl   The texmfcnf and fake-progname options
dnl   are suppressed if the support for kpathsea is turned off.  This is
dnl   because they largely depend on kpathsea searching being present.
dnl
dnl   Note, however, that font-generation is NOT, now, disabled if kpathsea
dnl   is.  This can create puzzling errors: fonts might be generated even when
dnl   they're not really missing (because the non-kpathsea search mechanism
dnl   can't find them), but the program still can't find them afterwards 
dnl   (because the font-generation method has put them where only kpathsea
dnl   expects to find them).  From experience with user feedback,
dnl   explaining this problem and running the test script in
dnl   test/test-font-gen.sh (`make test'), which explains what
dnl   DVI2BITMAP_PK_PATH should be set to, is less confusing and
dnl   inconvenient than having to rebuild dvi2bitmap with
dnl   font-generation forced on.
dnl
needfontfinding=1
AC_SUBST(KPATHSEAOBJ)
AC_ARG_WITH(kpathsea,
[  --without-kpathsea      Do not use kpathsea library
  --with-kpathsea[=path]  Use kpathsea, giving optional path to library],
  if test "$withval" = "yes"
  then
    AC_CHECK_HEADER(kpathsea/pathsearch.h,
    AC_CHECK_LIB(kpathsea, kpse_find_file,
      AC_DEFINE(ENABLE_KPATHSEA) 
      KPATHSEAOBJ="kpathsea.o" 
      LIBS="$LIBS -lkpathsea"
      needfontfinding=0))
  elif test "$withval" != "no"
  then
    safe_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS -I$withval/include"
    safe_LIBS="$LIBS"
    LIBS="$LIBS -L$withval/lib -lkpathsea"
    AC_CHECK_HEADER(kpathsea/pathsearch.h,
      AC_CHECK_LIB(kpathsea, kpse_find_file,
        AC_DEFINE(ENABLE_KPATHSEA) 
        KPATHSEAOBJ="kpathsea.o" 
        safe_CPPFLAGS="$safe_CPPFLAGS -I$withval/include"
        safe_LIBS="$safe_LIBS -L$withval/lib -lkpathsea"
        needfontfinding=0))
    CPPFLAGS="$safe_CPPFLAGS"
    LIBS="$safe_LIBS"
  fi,
  AC_CHECK_HEADER(kpathsea/pathsearch.h,
    AC_CHECK_LIB(kpathsea, kpse_find_file,
      AC_DEFINE(ENABLE_KPATHSEA) 
      KPATHSEAOBJ="kpathsea.o" 
      LIBS="$LIBS -lkpathsea"
      needfontfinding=0)))


dnl   Specify an alternative, or additional, font-finding script.
dnl   This should be expressed as a `font-string template', as
dnl   described in config.h
AC_ARG_WITH(fontfinder,
[  --with-fontfinder=script  Specify a script to find fonts],
  if test "$withval" != yes -a "$withval" != no; then
    AC_DEFINE_UNQUOTED(FONT_SEARCH_SCRIPT, "$withval")
    needfontfinding=0
  fi)

dnl   Test whether we have the kpse* commands, by searching through the path
dnl   for kpsewhich
AC_PATH_PROG(KPSEWHICH, kpsewhich)


dnl   If we're not using the kpselib, and we haven't specified a
dnl   fontfinder script, then use kpsewhich
if test $needfontfinding != 0 -a -n "$ac_cv_path_KPSEWHICH"; then
  AC_DEFINE_UNQUOTED(FONT_SEARCH_SCRIPT, "$ac_cv_path_KPSEWHICH pk %f.%dpk")
  needfontfinding=0
fi


dnl   --disable-texmfcnf
if test -n "$ac_cv_path_KPSEWHICH"; then
AC_ARG_ENABLE(texmfcnf,
[  --disable-texmfcnf      Disable setting of TEXMFCNF in environment],
  test "$enableval" = "yes" && T=`kpsewhich cnf texmf.cnf`
  test -n "$T" && AC_DEFINE_UNQUOTED(DEFAULT_TEXMFCNF, "`dirname $T`"),
  T=`kpsewhich cnf texmf.cnf`
  test -n "$T" && AC_DEFINE_UNQUOTED(DEFAULT_TEXMFCNF, "`dirname $T`"))
fi

dnl   Do we enable automatic font-generation?
dnl   If kpathsea is enabled, then the default is yes, otherwise no.
dnl
dnl   Well, not really.  I can't make my mind up about this, but I think
dnl   it's best, in general, if font-generation is always on by default,
dnl   as long as there's enough warning of the problems about this in
dnl   the documentation.
dnl
dnl   This option allows the user to specify a template for the
dnl   font-generation command, in the form of a `font-string
dnl   template', as described in config.h.  If no such template is
dnl   given, then we search for mktexpk and MakeTeXPK in turn, and
dnl   supply the well-known template for whichever one of those we
dnl   find.
dnl
AC_ARG_ENABLE(fontgen,
[  --enable-fontgen[=template]
                          Enable automatic font gen., opt. giving template],
  if test "$enableval" = "yes"; then
    getFontGenTemplate=true
  elif test "$enableval" = "no"; then
    getFontGenTemplate=false
  else
    AC_DEFINE_UNQUOTED(FONT_GEN_TEMPLATE, "${enableval}")
    getFontGenTemplate=false
  fi,
  getFontGenTemplate=true)


dnl   --with-mktexpk.  See also --enable-fontgen.
AC_PATH_PROG(MKTEXPK_PATH, mktexpk)
AC_ARG_WITH(mktexpk,
[  --with-mktexpk=[prog]   Enable mktexpk (default), giving optional program],
  if test "$withval" = "no"
  then unset MKTEXPK_PATH
  elif test "$withval" != "yes" && -n "$KPATHSEAOBJ"
  then MKTEXPK_PATH=$withval
  fi)

if $getFontGenTemplate && test -n "$MKTEXPK_PATH"; then
  AC_DEFINE_UNQUOTED(FONT_GEN_TEMPLATE, "${MKTEXPK_PATH}  --dpi %d --bdpi %b --mag %m --mfmode %M %f")
  getFontGenTemplate=false  # skip test below
fi

dnl   Use MakeTeXPK.  Don't use this if mktexpk was found
AC_PATH_PROG(MAKETEXPK_PATH, MakeTeXPK)
AC_ARG_WITH(maketexpk,
[  --with-maketexpk[=prog]   Enable MakeTeXPK, giving optional alternative],
  if test "$withval" = "no"; then
    unset MAKETEXPK_PATH
  elif test "$withval" != "yes"; then
    MAKETEXPK_PATH=$withval
  fi)

if $getFontGenTemplate && test -n "$MAKETEXPK_PATH"; then
  AC_DEFINE_UNQUOTED(FONT_GEN_TEMPLATE, "${MAKETEXPK_PATH} %f %d %b %m %M")
fi


dnl   Given that we are indeed generating fonts, if we want to use a
dnl   non-default Metafont mode, we can specify it here.
AC_ARG_WITH(fontgen-mode,
[  --with-fontgen-mode=mode,res
                          Specify mode,res for automatic font gen],
  if test "$withval" != "yes" -q "$withval" != "no"; then
    [eval `echo $withval | awk -F, '{printf "GENMODE=%s GENRES=%s",$1,$2}'`]
    AC_DEFINE_UNQUOTED(DEFAULT_MFMODE,"$GENMODE")
    test -n "$GENRES" && AC_DEFINE_UNQUOTED(DEFAULT_RESOLUTION,$GENRES)
  fi)


dnl   Do we want to use the fake_progname feature in kpathsea.cc?
dnl   (following makes no sense if we don't have kpsewhich, and so
dnl   presumably aren't using the texmf.cnf, but this is a
dnl   use-at-your-own-risk option anyway, so presumably the user knows
dnl   what they're doing)
AC_PATH_PROG(XDVI_PATH, xdvi)
AC_ARG_ENABLE(fake-progname,
[  --enable-fake-progname[=prog]
                          Have dvi2bitmap lie about its name (see full docs)],
  if test "$enableval" = "yes"
  then AC_DEFINE_UNQUOTED(FAKE_PROGNAME, "${XDVI_PATH}")
  elif test "$enableval" != "no"
  then AC_DEFINE_UNQUOTED(FAKE_PROGNAME, "${enableval}")
  fi)

dnl   Specify support for PNG output.  Test library for function
dnl   png_libpng_ver.  At present, PNGBitmap.cc is
dnl   written to use a palette rather than a greyscale (but see the
dnl   comments about GREYSCALE_BITMAP in that module).  If we were to
dnl   revert to using the colour model PNG_COLOR_TYPE_GRAY, then we
dnl   need the function png_set_write_user_transform_fn (which means later
dnl   than version 0.96).
dnl
dnl   Test this by default (ie, unless the option --disable-png is given).
AC_SUBST(PNGOBJ)
AC_ARG_ENABLE(png,
[  --enable-png            Enable output of PNG files],
  test "$enableval" = "yes" && AC_CHECK_HEADER(png.h,
    AC_CHECK_LIB(png, png_libpng_ver,
        AC_DEFINE(ENABLE_PNG)
        PNGOBJ="PNGBitmap.o"
        LIBS="$LIBS -lpng -lz",
      echo "png library not found or too old -- not including PNG support",
      -lz)),
  AC_CHECK_HEADER(png.h,
    AC_CHECK_LIB(png, png_libpng_ver,
        AC_DEFINE(ENABLE_PNG)
        PNGOBJ="PNGBitmap.o"
        LIBS="$LIBS -lpng -lz",
      echo "png library not found or too old -- not including PNG support",
      -lz)))

dnl   Specify support for GIF output
AC_SUBST(GIFOBJ)
AC_ARG_ENABLE(gif, 
[  --enable-gif            Enable output of GIF files],
  AC_DEFINE(ENABLE_GIF) GIFOBJ="GIFBitmap.o")


dnl   Select path separator characters.  Specify as a pair of
dnl   characters, first filesystem-path, then search path.  For
dnl   example, unix would have --with-path-seps=/:
AC_ARG_WITH(path-seps,
[  --with-path-seps=cc     Specify path separators (default --with-path-seps=/:)],
  if test "$withval" != "yes" -q "$withval" != "no"; then
    # xx below allows us to deal with the case where $withval has other
    # than two characters.  Note no \? in basic REs.
    # Quoting below is subtle -- note that eval re-parses its argument.
    [eval `echo "$withval"xx | sed "s/\(.\)\(.\).*/SLASH='\\1' COLON='\\2'/"`]
    AC_DEFINE_UNQUOTED(FSPATH_SEP,'$SLASH')
    test -n "$COLON" && AC_DEFINE_UNQUOTED(SRCHPATH_SEP,'$COLON')
  fi)

AC_OUTPUT(Makefile test/Makefile)


dnl   Check the dependencies.  We can't do this once in the
dnl   Makefile.in file, because the dependencies vary depending on the
dnl   modules included.  Use the -MM flag rather than just -M so that
dnl   we ignore dependencies on system files (well that's the plan,
dnl   but it seems that Compaq's cxx compiler accepts -MM as
dnl   equivalent to -M, and generates the full set of dependencies,
dnl   taking as long to do it as it does to compile the source set).
AC_MSG_CHECKING(dependencies (might take a while))
make deps_
AC_MSG_RESULT(done)
